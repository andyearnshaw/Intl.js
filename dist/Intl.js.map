{"version":3,"file":null,"sources":["../src/util.js","../src/exp.js","../src/6.locales-currencies-tz.js","../src/9.negotiation.js","../src/8.intl.js","../src/11.numberformat.js","../src/cldr.js","../src/12.datetimeformat.js","../src/13.locale-sensitive-functions.js","../src/core.js","../src/browser-main.js"],"sourcesContent":["const realDefineProp = (function () {\n        let sentinel = function(){};\n        try {\n            Object.defineProperty(sentinel, 'a', {\n                get: function () {\n                    return 1;\n                }\n            });\n            Object.defineProperty(sentinel, 'prototype', { writable: false });\n            return sentinel.a === 1 && sentinel.prototype instanceof Object;\n        } catch (e) {\n            return false;\n        }\n    })();\n\n// Need a workaround for getters in ES3\nexport const es3 = !realDefineProp && !Object.prototype.__defineGetter__;\n\n// We use this a lot (and need it for proto-less objects)\nexport const hop = Object.prototype.hasOwnProperty;\n\n// Naive defineProperty for compatibility\nexport const defineProperty = realDefineProp ? Object.defineProperty : function (obj, name, desc) {\n    if ('get' in desc && obj.__defineGetter__)\n        obj.__defineGetter__(name, desc.get);\n\n    else if (!hop.call(obj, name) || 'value' in desc)\n        obj[name] = desc.value;\n};\n\n// Array.prototype.indexOf, as good as we need it to be\nexport const arrIndexOf = Array.prototype.indexOf || function (search) {\n    /*jshint validthis:true */\n    let t = this;\n    if (!t.length)\n        return -1;\n\n    for (let i = arguments[1] || 0, max = t.length; i < max; i++) {\n        if (t[i] === search)\n            return i;\n    }\n\n    return -1;\n};\n\n// Create an object with the specified prototype (2nd arg required for Record)\nexport const objCreate = Object.create || function (proto, props) {\n    let obj;\n\n    function F() {}\n    F.prototype = proto;\n    obj = new F();\n\n    for (let k in props) {\n        if (hop.call(props, k))\n            defineProperty(obj, k, props[k]);\n    }\n\n    return obj;\n};\n\n// Snapshot some (hopefully still) native built-ins\nexport const arrSlice  = Array.prototype.slice;\nexport const arrConcat = Array.prototype.concat;\nexport const arrPush   = Array.prototype.push;\nexport const arrJoin   = Array.prototype.join;\nexport const arrShift  = Array.prototype.shift;\n\n// Naive Function.prototype.bind for compatibility\nexport const fnBind = Function.prototype.bind || function (thisObj) {\n    let fn = this,\n        args = arrSlice.call(arguments, 1);\n\n    // All our (presently) bound functions have either 1 or 0 arguments. By returning\n    // different function signatures, we can pass some tests in ES3 environments\n    if (fn.length === 1) {\n        return function () {\n            return fn.apply(thisObj, arrConcat.call(args, arrSlice.call(arguments)));\n        };\n    }\n    return function () {\n        return fn.apply(thisObj, arrConcat.call(args, arrSlice.call(arguments)));\n    };\n};\n\n// Object housing internal properties for constructors\nexport const internals = objCreate(null);\n\n// Keep internal properties internal\nexport const secret = Math.random();\n\n// Helper functions\n// ================\n\n/**\n * A function to deal with the inaccuracy of calculating log10 in pre-ES6\n * JavaScript environments. Math.log(num) / Math.LN10 was responsible for\n * causing issue #62.\n */\nexport function log10Floor (n) {\n    // ES6 provides the more accurate Math.log10\n    if (typeof Math.log10 === 'function')\n        return Math.floor(Math.log10(n));\n\n    let x = Math.round(Math.log(n) * Math.LOG10E);\n    return x - (Number('1e' + x) > n);\n}\n\n/**\n * A map that doesn't contain Object in its prototype chain\n */\nexport function Record (obj) {\n    // Copy only own properties over unless this object is already a Record instance\n    for (let k in obj) {\n        if (obj instanceof Record || hop.call(obj, k))\n            defineProperty(this, k, { value: obj[k], enumerable: true, writable: true, configurable: true });\n    }\n}\nRecord.prototype = objCreate(null);\n\n/**\n * An ordered list\n */\nexport function List() {\n    defineProperty(this, 'length', { writable:true, value: 0 });\n\n    if (arguments.length)\n        arrPush.apply(this, arrSlice.call(arguments));\n}\nList.prototype = objCreate(null);\n\n/**\n * Constructs a regular expression to restore tainted RegExp properties\n */\nexport function createRegExpRestore () {\n    if (internals.disableRegExpRestore) {\n        return function() { /* no-op */ };\n    }\n\n    let regExpCache = {\n            lastMatch: RegExp.lastMatch || '',\n            leftContext: RegExp.leftContext,\n            multiline: RegExp.multiline,\n            input: RegExp.input\n        },\n        has = false;\n\n    // Create a snapshot of all the 'captured' properties\n    for (let i = 1; i <= 9; i++)\n        has = (regExpCache['$'+i] = RegExp['$'+i]) || has;\n\n    return function() {\n        // Now we've snapshotted some properties, escape the lastMatch string\n        let esc = /[.?*+^$[\\]\\\\(){}|-]/g,\n            lm = regExpCache.lastMatch.replace(esc, '\\\\$&'),\n            reg = new List();\n\n        // If any of the captured strings were non-empty, iterate over them all\n        if (has) {\n            for (let i = 1; i <= 9; i++) {\n                let m = regExpCache['$'+i];\n\n                // If it's empty, add an empty capturing group\n                if (!m)\n                    lm = '()' + lm;\n\n                // Else find the string in lm and escape & wrap it to capture it\n                else {\n                    m = m.replace(esc, '\\\\$&');\n                    lm = lm.replace(m, '(' + m + ')');\n                }\n\n                // Push it to the reg and chop lm to make sure further groups come after\n                arrPush.call(reg, lm.slice(0, lm.indexOf('(') + 1));\n                lm = lm.slice(lm.indexOf('(') + 1);\n            }\n        }\n\n        let exprStr = arrJoin.call(reg, '') + lm;\n\n        // Shorten the regex by replacing each part of the expression with a match\n        // for a string of that exact length.  This is safe for the type of\n        // expressions generated above, because the expression matches the whole\n        // match string, so we know each group and each segment between capturing\n        // groups can be matched by its length alone.\n        exprStr = exprStr.replace(/(\\\\\\(|\\\\\\)|[^()])+/g, (match) => {\n            return `[\\\\s\\\\S]{${match.replace('\\\\','').length}}`;\n        });\n\n        // Create the regular expression that will reconstruct the RegExp properties\n        let expr = new RegExp(exprStr, regExpCache.multiline ? 'gm' : 'g');\n\n        // Set the lastIndex of the generated expression to ensure that the match\n        // is found in the correct index.\n        expr.lastIndex = regExpCache.leftContext.length;\n\n        expr.exec(regExpCache.input);\n    };\n}\n\n/**\n * Mimics ES5's abstract ToObject() function\n */\nexport function toObject (arg) {\n    if (arg === null)\n        throw new TypeError('Cannot convert null or undefined to object');\n\n    if (typeof arg === 'object')\n        return arg;\n    return Object(arg);\n}\n\nexport function toNumber (arg) {\n    if (typeof arg === 'number')\n        return arg;\n    return Number(arg);\n}\n\nexport function toInteger (arg) {\n  let number = toNumber(arg);\n  if (isNaN(number))\n      return 0;\n  if (number === +0 ||\n      number === -0 ||\n      number === +Infinity ||\n      number === -Infinity)\n      return number;\n  if (number < 0)\n      return Math.floor(Math.abs(number)) * -1;\n  return Math.floor(Math.abs(number));\n}\n\nexport function toLength (arg) {\n  let len = toInteger(arg);\n  if (len <= 0)\n      return 0;\n  if (len === Infinity)\n      return Math.pow(2, 53) - 1;\n  return Math.min(len, Math.pow(2, 53) - 1);\n}\n\n/**\n * Returns \"internal\" properties for an object\n */\nexport function getInternalProperties (obj) {\n    if (hop.call(obj, '__getInternalProperties'))\n        return obj.__getInternalProperties(secret);\n\n    return objCreate(null);\n}\n","/**\n* Defines regular expressions for various operations related to the BCP 47 syntax,\n* as defined at http://tools.ietf.org/html/bcp47#section-2.1\n*/\n\n// extlang       = 3ALPHA              ; selected ISO 639 codes\n//                 *2(\"-\" 3ALPHA)      ; permanently reserved\nconst extlang = '[a-z]{3}(?:-[a-z]{3}){0,2}';\n\n// language      = 2*3ALPHA            ; shortest ISO 639 code\n//                 [\"-\" extlang]       ; sometimes followed by\n//                                     ; extended language subtags\n//               / 4ALPHA              ; or reserved for future use\n//               / 5*8ALPHA            ; or registered language subtag\nconst language = '(?:[a-z]{2,3}(?:-' + extlang + ')?|[a-z]{4}|[a-z]{5,8})';\n\n// script        = 4ALPHA              ; ISO 15924 code\nconst script = '[a-z]{4}';\n\n// region        = 2ALPHA              ; ISO 3166-1 code\n//               / 3DIGIT              ; UN M.49 code\nconst region = '(?:[a-z]{2}|\\\\d{3})';\n\n// variant       = 5*8alphanum         ; registered variants\n//               / (DIGIT 3alphanum)\nconst variant = '(?:[a-z0-9]{5,8}|\\\\d[a-z0-9]{3})';\n\n//                                     ; Single alphanumerics\n//                                     ; \"x\" reserved for private use\n// singleton     = DIGIT               ; 0 - 9\n//               / %x41-57             ; A - W\n//               / %x59-5A             ; Y - Z\n//               / %x61-77             ; a - w\n//               / %x79-7A             ; y - z\nconst singleton = '[0-9a-wy-z]';\n\n// extension     = singleton 1*(\"-\" (2*8alphanum))\nconst extension = singleton + '(?:-[a-z0-9]{2,8})+';\n\n// privateuse    = \"x\" 1*(\"-\" (1*8alphanum))\nconst privateuse = 'x(?:-[a-z0-9]{1,8})+';\n\n// irregular     = \"en-GB-oed\"         ; irregular tags do not match\n//               / \"i-ami\"             ; the 'langtag' production and\n//               / \"i-bnn\"             ; would not otherwise be\n//               / \"i-default\"         ; considered 'well-formed'\n//               / \"i-enochian\"        ; These tags are all valid,\n//               / \"i-hak\"             ; but most are deprecated\n//               / \"i-klingon\"         ; in favor of more modern\n//               / \"i-lux\"             ; subtags or subtag\n//               / \"i-mingo\"           ; combination\n//               / \"i-navajo\"\n//               / \"i-pwn\"\n//               / \"i-tao\"\n//               / \"i-tay\"\n//               / \"i-tsu\"\n//               / \"sgn-BE-FR\"\n//               / \"sgn-BE-NL\"\n//               / \"sgn-CH-DE\"\nconst irregular = '(?:en-GB-oed'\n          + '|i-(?:ami|bnn|default|enochian|hak|klingon|lux|mingo|navajo|pwn|tao|tay|tsu)'\n          + '|sgn-(?:BE-FR|BE-NL|CH-DE))';\n\n// regular       = \"art-lojban\"        ; these tags match the 'langtag'\n//               / \"cel-gaulish\"       ; production, but their subtags\n//               / \"no-bok\"            ; are not extended language\n//               / \"no-nyn\"            ; or variant subtags: their meaning\n//               / \"zh-guoyu\"          ; is defined by their registration\n//               / \"zh-hakka\"          ; and all of these are deprecated\n//               / \"zh-min\"            ; in favor of a more modern\n//               / \"zh-min-nan\"        ; subtag or sequence of subtags\n//               / \"zh-xiang\"\nconst regular = '(?:art-lojban|cel-gaulish|no-bok|no-nyn'\n        + '|zh-(?:guoyu|hakka|min|min-nan|xiang))';\n\n// grandfathered = irregular           ; non-redundant tags registered\n//               / regular             ; during the RFC 3066 era\nconst grandfathered = '(?:' + irregular + '|' + regular + ')';\n\n// langtag       = language\n//                 [\"-\" script]\n//                 [\"-\" region]\n//                 *(\"-\" variant)\n//                 *(\"-\" extension)\n//                 [\"-\" privateuse]\nconst langtag = language + '(?:-' + script + ')?(?:-' + region + ')?(?:-'\n        + variant + ')*(?:-' + extension + ')*(?:-' + privateuse + ')?';\n\n// Language-Tag  = langtag             ; normal language tags\n//               / privateuse          ; private use tag\n//               / grandfathered       ; grandfathered tags\nexport let expBCP47Syntax = RegExp('^(?:'+langtag+'|'+privateuse+'|'+grandfathered+')$', 'i');\n\n// Match duplicate variants in a language tag\nexport let expVariantDupes = RegExp('^(?!x).*?-('+variant+')-(?:\\\\w{4,8}-(?!x-))*\\\\1\\\\b', 'i');\n\n// Match duplicate singletons in a language tag (except in private use)\nexport let expSingletonDupes = RegExp('^(?!x).*?-('+singleton+')-(?:\\\\w+-(?!x-))*\\\\1\\\\b', 'i');\n\n// Match all extension sequences\nexport let expExtSequences = RegExp('-'+extension, 'ig');\n","// Sect 6.2 Language Tags\n// ======================\n\nimport {\n    expBCP47Syntax,\n    expExtSequences,\n    expVariantDupes,\n    expSingletonDupes\n} from './exp';\n\nimport {\n    hop,\n    arrJoin,\n    arrSlice\n} from \"./util.js\";\n\n// Default locale is the first-added locale data for us\nexport let defaultLocale;\nexport function setDefaultLocale(locale) {\n    defaultLocale = locale;\n}\n\n// IANA Subtag Registry redundant tag and subtag maps\nconst redundantTags = {\n    tags: {\n        \"art-lojban\": \"jbo\",\n        \"i-ami\": \"ami\",\n        \"i-bnn\": \"bnn\",\n        \"i-hak\": \"hak\",\n        \"i-klingon\": \"tlh\",\n        \"i-lux\": \"lb\",\n        \"i-navajo\": \"nv\",\n        \"i-pwn\": \"pwn\",\n        \"i-tao\": \"tao\",\n        \"i-tay\": \"tay\",\n        \"i-tsu\": \"tsu\",\n        \"no-bok\": \"nb\",\n        \"no-nyn\": \"nn\",\n        \"sgn-BE-FR\": \"sfb\",\n        \"sgn-BE-NL\": \"vgt\",\n        \"sgn-CH-DE\": \"sgg\",\n        \"zh-guoyu\": \"cmn\",\n        \"zh-hakka\": \"hak\",\n        \"zh-min-nan\": \"nan\",\n        \"zh-xiang\": \"hsn\",\n        \"sgn-BR\": \"bzs\",\n        \"sgn-CO\": \"csn\",\n        \"sgn-DE\": \"gsg\",\n        \"sgn-DK\": \"dsl\",\n        \"sgn-ES\": \"ssp\",\n        \"sgn-FR\": \"fsl\",\n        \"sgn-GB\": \"bfi\",\n        \"sgn-GR\": \"gss\",\n        \"sgn-IE\": \"isg\",\n        \"sgn-IT\": \"ise\",\n        \"sgn-JP\": \"jsl\",\n        \"sgn-MX\": \"mfs\",\n        \"sgn-NI\": \"ncs\",\n        \"sgn-NL\": \"dse\",\n        \"sgn-NO\": \"nsl\",\n        \"sgn-PT\": \"psr\",\n        \"sgn-SE\": \"swl\",\n        \"sgn-US\": \"ase\",\n        \"sgn-ZA\": \"sfs\",\n        \"zh-cmn\": \"cmn\",\n        \"zh-cmn-Hans\": \"cmn-Hans\",\n        \"zh-cmn-Hant\": \"cmn-Hant\",\n        \"zh-gan\": \"gan\",\n        \"zh-wuu\": \"wuu\",\n        \"zh-yue\": \"yue\"\n    },\n    subtags: {\n        BU: \"MM\",\n        DD: \"DE\",\n        FX: \"FR\",\n        TP: \"TL\",\n        YD: \"YE\",\n        ZR: \"CD\",\n        heploc: \"alalc97\",\n        'in': \"id\",\n        iw: \"he\",\n        ji: \"yi\",\n        jw: \"jv\",\n        mo: \"ro\",\n        ayx: \"nun\",\n        bjd: \"drl\",\n        ccq: \"rki\",\n        cjr: \"mom\",\n        cka: \"cmr\",\n        cmk: \"xch\",\n        drh: \"khk\",\n        drw: \"prs\",\n        gav: \"dev\",\n        hrr: \"jal\",\n        ibi: \"opa\",\n        kgh: \"kml\",\n        lcq: \"ppr\",\n        mst: \"mry\",\n        myt: \"mry\",\n        sca: \"hle\",\n        tie: \"ras\",\n        tkk: \"twm\",\n        tlw: \"weo\",\n        tnf: \"prs\",\n        ybd: \"rki\",\n        yma: \"lrr\"\n    },\n    extLang: {\n        aao: [\"aao\", \"ar\"],\n        abh: [\"abh\", \"ar\"],\n        abv: [\"abv\", \"ar\"],\n        acm: [\"acm\", \"ar\"],\n        acq: [\"acq\", \"ar\"],\n        acw: [\"acw\", \"ar\"],\n        acx: [\"acx\", \"ar\"],\n        acy: [\"acy\", \"ar\"],\n        adf: [\"adf\", \"ar\"],\n        ads: [\"ads\", \"sgn\"],\n        aeb: [\"aeb\", \"ar\"],\n        aec: [\"aec\", \"ar\"],\n        aed: [\"aed\", \"sgn\"],\n        aen: [\"aen\", \"sgn\"],\n        afb: [\"afb\", \"ar\"],\n        afg: [\"afg\", \"sgn\"],\n        ajp: [\"ajp\", \"ar\"],\n        apc: [\"apc\", \"ar\"],\n        apd: [\"apd\", \"ar\"],\n        arb: [\"arb\", \"ar\"],\n        arq: [\"arq\", \"ar\"],\n        ars: [\"ars\", \"ar\"],\n        ary: [\"ary\", \"ar\"],\n        arz: [\"arz\", \"ar\"],\n        ase: [\"ase\", \"sgn\"],\n        asf: [\"asf\", \"sgn\"],\n        asp: [\"asp\", \"sgn\"],\n        asq: [\"asq\", \"sgn\"],\n        asw: [\"asw\", \"sgn\"],\n        auz: [\"auz\", \"ar\"],\n        avl: [\"avl\", \"ar\"],\n        ayh: [\"ayh\", \"ar\"],\n        ayl: [\"ayl\", \"ar\"],\n        ayn: [\"ayn\", \"ar\"],\n        ayp: [\"ayp\", \"ar\"],\n        bbz: [\"bbz\", \"ar\"],\n        bfi: [\"bfi\", \"sgn\"],\n        bfk: [\"bfk\", \"sgn\"],\n        bjn: [\"bjn\", \"ms\"],\n        bog: [\"bog\", \"sgn\"],\n        bqn: [\"bqn\", \"sgn\"],\n        bqy: [\"bqy\", \"sgn\"],\n        btj: [\"btj\", \"ms\"],\n        bve: [\"bve\", \"ms\"],\n        bvl: [\"bvl\", \"sgn\"],\n        bvu: [\"bvu\", \"ms\"],\n        bzs: [\"bzs\", \"sgn\"],\n        cdo: [\"cdo\", \"zh\"],\n        cds: [\"cds\", \"sgn\"],\n        cjy: [\"cjy\", \"zh\"],\n        cmn: [\"cmn\", \"zh\"],\n        coa: [\"coa\", \"ms\"],\n        cpx: [\"cpx\", \"zh\"],\n        csc: [\"csc\", \"sgn\"],\n        csd: [\"csd\", \"sgn\"],\n        cse: [\"cse\", \"sgn\"],\n        csf: [\"csf\", \"sgn\"],\n        csg: [\"csg\", \"sgn\"],\n        csl: [\"csl\", \"sgn\"],\n        csn: [\"csn\", \"sgn\"],\n        csq: [\"csq\", \"sgn\"],\n        csr: [\"csr\", \"sgn\"],\n        czh: [\"czh\", \"zh\"],\n        czo: [\"czo\", \"zh\"],\n        doq: [\"doq\", \"sgn\"],\n        dse: [\"dse\", \"sgn\"],\n        dsl: [\"dsl\", \"sgn\"],\n        dup: [\"dup\", \"ms\"],\n        ecs: [\"ecs\", \"sgn\"],\n        esl: [\"esl\", \"sgn\"],\n        esn: [\"esn\", \"sgn\"],\n        eso: [\"eso\", \"sgn\"],\n        eth: [\"eth\", \"sgn\"],\n        fcs: [\"fcs\", \"sgn\"],\n        fse: [\"fse\", \"sgn\"],\n        fsl: [\"fsl\", \"sgn\"],\n        fss: [\"fss\", \"sgn\"],\n        gan: [\"gan\", \"zh\"],\n        gds: [\"gds\", \"sgn\"],\n        gom: [\"gom\", \"kok\"],\n        gse: [\"gse\", \"sgn\"],\n        gsg: [\"gsg\", \"sgn\"],\n        gsm: [\"gsm\", \"sgn\"],\n        gss: [\"gss\", \"sgn\"],\n        gus: [\"gus\", \"sgn\"],\n        hab: [\"hab\", \"sgn\"],\n        haf: [\"haf\", \"sgn\"],\n        hak: [\"hak\", \"zh\"],\n        hds: [\"hds\", \"sgn\"],\n        hji: [\"hji\", \"ms\"],\n        hks: [\"hks\", \"sgn\"],\n        hos: [\"hos\", \"sgn\"],\n        hps: [\"hps\", \"sgn\"],\n        hsh: [\"hsh\", \"sgn\"],\n        hsl: [\"hsl\", \"sgn\"],\n        hsn: [\"hsn\", \"zh\"],\n        icl: [\"icl\", \"sgn\"],\n        ils: [\"ils\", \"sgn\"],\n        inl: [\"inl\", \"sgn\"],\n        ins: [\"ins\", \"sgn\"],\n        ise: [\"ise\", \"sgn\"],\n        isg: [\"isg\", \"sgn\"],\n        isr: [\"isr\", \"sgn\"],\n        jak: [\"jak\", \"ms\"],\n        jax: [\"jax\", \"ms\"],\n        jcs: [\"jcs\", \"sgn\"],\n        jhs: [\"jhs\", \"sgn\"],\n        jls: [\"jls\", \"sgn\"],\n        jos: [\"jos\", \"sgn\"],\n        jsl: [\"jsl\", \"sgn\"],\n        jus: [\"jus\", \"sgn\"],\n        kgi: [\"kgi\", \"sgn\"],\n        knn: [\"knn\", \"kok\"],\n        kvb: [\"kvb\", \"ms\"],\n        kvk: [\"kvk\", \"sgn\"],\n        kvr: [\"kvr\", \"ms\"],\n        kxd: [\"kxd\", \"ms\"],\n        lbs: [\"lbs\", \"sgn\"],\n        lce: [\"lce\", \"ms\"],\n        lcf: [\"lcf\", \"ms\"],\n        liw: [\"liw\", \"ms\"],\n        lls: [\"lls\", \"sgn\"],\n        lsg: [\"lsg\", \"sgn\"],\n        lsl: [\"lsl\", \"sgn\"],\n        lso: [\"lso\", \"sgn\"],\n        lsp: [\"lsp\", \"sgn\"],\n        lst: [\"lst\", \"sgn\"],\n        lsy: [\"lsy\", \"sgn\"],\n        ltg: [\"ltg\", \"lv\"],\n        lvs: [\"lvs\", \"lv\"],\n        lzh: [\"lzh\", \"zh\"],\n        max: [\"max\", \"ms\"],\n        mdl: [\"mdl\", \"sgn\"],\n        meo: [\"meo\", \"ms\"],\n        mfa: [\"mfa\", \"ms\"],\n        mfb: [\"mfb\", \"ms\"],\n        mfs: [\"mfs\", \"sgn\"],\n        min: [\"min\", \"ms\"],\n        mnp: [\"mnp\", \"zh\"],\n        mqg: [\"mqg\", \"ms\"],\n        mre: [\"mre\", \"sgn\"],\n        msd: [\"msd\", \"sgn\"],\n        msi: [\"msi\", \"ms\"],\n        msr: [\"msr\", \"sgn\"],\n        mui: [\"mui\", \"ms\"],\n        mzc: [\"mzc\", \"sgn\"],\n        mzg: [\"mzg\", \"sgn\"],\n        mzy: [\"mzy\", \"sgn\"],\n        nan: [\"nan\", \"zh\"],\n        nbs: [\"nbs\", \"sgn\"],\n        ncs: [\"ncs\", \"sgn\"],\n        nsi: [\"nsi\", \"sgn\"],\n        nsl: [\"nsl\", \"sgn\"],\n        nsp: [\"nsp\", \"sgn\"],\n        nsr: [\"nsr\", \"sgn\"],\n        nzs: [\"nzs\", \"sgn\"],\n        okl: [\"okl\", \"sgn\"],\n        orn: [\"orn\", \"ms\"],\n        ors: [\"ors\", \"ms\"],\n        pel: [\"pel\", \"ms\"],\n        pga: [\"pga\", \"ar\"],\n        pks: [\"pks\", \"sgn\"],\n        prl: [\"prl\", \"sgn\"],\n        prz: [\"prz\", \"sgn\"],\n        psc: [\"psc\", \"sgn\"],\n        psd: [\"psd\", \"sgn\"],\n        pse: [\"pse\", \"ms\"],\n        psg: [\"psg\", \"sgn\"],\n        psl: [\"psl\", \"sgn\"],\n        pso: [\"pso\", \"sgn\"],\n        psp: [\"psp\", \"sgn\"],\n        psr: [\"psr\", \"sgn\"],\n        pys: [\"pys\", \"sgn\"],\n        rms: [\"rms\", \"sgn\"],\n        rsi: [\"rsi\", \"sgn\"],\n        rsl: [\"rsl\", \"sgn\"],\n        sdl: [\"sdl\", \"sgn\"],\n        sfb: [\"sfb\", \"sgn\"],\n        sfs: [\"sfs\", \"sgn\"],\n        sgg: [\"sgg\", \"sgn\"],\n        sgx: [\"sgx\", \"sgn\"],\n        shu: [\"shu\", \"ar\"],\n        slf: [\"slf\", \"sgn\"],\n        sls: [\"sls\", \"sgn\"],\n        sqk: [\"sqk\", \"sgn\"],\n        sqs: [\"sqs\", \"sgn\"],\n        ssh: [\"ssh\", \"ar\"],\n        ssp: [\"ssp\", \"sgn\"],\n        ssr: [\"ssr\", \"sgn\"],\n        svk: [\"svk\", \"sgn\"],\n        swc: [\"swc\", \"sw\"],\n        swh: [\"swh\", \"sw\"],\n        swl: [\"swl\", \"sgn\"],\n        syy: [\"syy\", \"sgn\"],\n        tmw: [\"tmw\", \"ms\"],\n        tse: [\"tse\", \"sgn\"],\n        tsm: [\"tsm\", \"sgn\"],\n        tsq: [\"tsq\", \"sgn\"],\n        tss: [\"tss\", \"sgn\"],\n        tsy: [\"tsy\", \"sgn\"],\n        tza: [\"tza\", \"sgn\"],\n        ugn: [\"ugn\", \"sgn\"],\n        ugy: [\"ugy\", \"sgn\"],\n        ukl: [\"ukl\", \"sgn\"],\n        uks: [\"uks\", \"sgn\"],\n        urk: [\"urk\", \"ms\"],\n        uzn: [\"uzn\", \"uz\"],\n        uzs: [\"uzs\", \"uz\"],\n        vgt: [\"vgt\", \"sgn\"],\n        vkk: [\"vkk\", \"ms\"],\n        vkt: [\"vkt\", \"ms\"],\n        vsi: [\"vsi\", \"sgn\"],\n        vsl: [\"vsl\", \"sgn\"],\n        vsv: [\"vsv\", \"sgn\"],\n        wuu: [\"wuu\", \"zh\"],\n        xki: [\"xki\", \"sgn\"],\n        xml: [\"xml\", \"sgn\"],\n        xmm: [\"xmm\", \"ms\"],\n        xms: [\"xms\", \"sgn\"],\n        yds: [\"yds\", \"sgn\"],\n        ysl: [\"ysl\", \"sgn\"],\n        yue: [\"yue\", \"zh\"],\n        zib: [\"zib\", \"sgn\"],\n        zlm: [\"zlm\", \"ms\"],\n        zmi: [\"zmi\", \"ms\"],\n        zsl: [\"zsl\", \"sgn\"],\n        zsm: [\"zsm\", \"ms\"]\n    }\n};\n\n/**\n * Convert only a-z to uppercase as per section 6.1 of the spec\n */\nexport function toLatinUpperCase (str) {\n    let i = str.length;\n\n    while (i--) {\n        let ch = str.charAt(i);\n\n        if (ch >= \"a\" && ch <= \"z\")\n            str = str.slice(0, i) + ch.toUpperCase() + str.slice(i+1);\n    }\n\n    return str;\n}\n\n/**\n * The IsStructurallyValidLanguageTag abstract operation verifies that the locale\n * argument (which must be a String value)\n *\n * - represents a well-formed BCP 47 language tag as specified in RFC 5646 section\n *   2.1, or successor,\n * - does not include duplicate variant subtags, and\n * - does not include duplicate singleton subtags.\n *\n * The abstract operation returns true if locale can be generated from the ABNF\n * grammar in section 2.1 of the RFC, starting with Language-Tag, and does not\n * contain duplicate variant or singleton subtags (other than as a private use\n * subtag). It returns false otherwise. Terminal value characters in the grammar are\n * interpreted as the Unicode equivalents of the ASCII octet values given.\n */\nexport function /* 6.2.2 */IsStructurallyValidLanguageTag(locale) {\n    // represents a well-formed BCP 47 language tag as specified in RFC 5646\n    if (!expBCP47Syntax.test(locale))\n        return false;\n\n    // does not include duplicate variant subtags, and\n    if (expVariantDupes.test(locale))\n        return false;\n\n    // does not include duplicate singleton subtags.\n    if (expSingletonDupes.test(locale))\n        return false;\n\n    return true;\n}\n\n/**\n * The CanonicalizeLanguageTag abstract operation returns the canonical and case-\n * regularized form of the locale argument (which must be a String value that is\n * a structurally valid BCP 47 language tag as verified by the\n * IsStructurallyValidLanguageTag abstract operation). It takes the steps\n * specified in RFC 5646 section 4.5, or successor, to bring the language tag\n * into canonical form, and to regularize the case of the subtags, but does not\n * take the steps to bring a language tag into “extlang form” and to reorder\n * variant subtags.\n\n * The specifications for extensions to BCP 47 language tags, such as RFC 6067,\n * may include canonicalization rules for the extension subtag sequences they\n * define that go beyond the canonicalization rules of RFC 5646 section 4.5.\n * Implementations are allowed, but not required, to apply these additional rules.\n */\nexport function /* 6.2.3 */CanonicalizeLanguageTag (locale) {\n    let match, parts;\n\n    // A language tag is in 'canonical form' when the tag is well-formed\n    // according to the rules in Sections 2.1 and 2.2\n\n    // Section 2.1 says all subtags use lowercase...\n    locale = locale.toLowerCase();\n\n    // ...with 2 exceptions: 'two-letter and four-letter subtags that neither\n    // appear at the start of the tag nor occur after singletons.  Such two-letter\n    // subtags are all uppercase (as in the tags \"en-CA-x-ca\" or \"sgn-BE-FR\") and\n    // four-letter subtags are titlecase (as in the tag \"az-Latn-x-latn\").\n    parts = locale.split('-');\n    for (let i = 1, max = parts.length; i < max; i++) {\n        // Two-letter subtags are all uppercase\n        if (parts[i].length === 2)\n            parts[i] = parts[i].toUpperCase();\n\n        // Four-letter subtags are titlecase\n        else if (parts[i].length === 4)\n            parts[i] = parts[i].charAt(0).toUpperCase() + parts[i].slice(1);\n\n        // Is it a singleton?\n        else if (parts[i].length === 1 && parts[i] !== 'x')\n            break;\n    }\n    locale = arrJoin.call(parts, '-');\n\n    // The steps laid out in RFC 5646 section 4.5 are as follows:\n\n    // 1.  Extension sequences are ordered into case-insensitive ASCII order\n    //     by singleton subtag.\n    if ((match = locale.match(expExtSequences)) && match.length > 1) {\n        // The built-in sort() sorts by ASCII order, so use that\n        match.sort();\n\n        // Replace all extensions with the joined, sorted array\n        locale = locale.replace(\n            RegExp('(?:' + expExtSequences.source + ')+', 'i'),\n            arrJoin.call(match, '')\n        );\n    }\n\n    // 2.  Redundant or grandfathered tags are replaced by their 'Preferred-\n    //     Value', if there is one.\n    if (hop.call(redundantTags.tags, locale))\n        locale = redundantTags.tags[locale];\n\n    // 3.  Subtags are replaced by their 'Preferred-Value', if there is one.\n    //     For extlangs, the original primary language subtag is also\n    //     replaced if there is a primary language subtag in the 'Preferred-\n    //     Value'.\n    parts = locale.split('-');\n\n    for (let i = 1, max = parts.length; i < max; i++) {\n        if (hop.call(redundantTags.subtags, parts[i]))\n            parts[i] = redundantTags.subtags[parts[i]];\n\n        else if (hop.call(redundantTags.extLang, parts[i])) {\n            parts[i] = redundantTags.extLang[parts[i]][0];\n\n            // For extlang tags, the prefix needs to be removed if it is redundant\n            if (i === 1 && redundantTags.extLang[parts[1]][1] === parts[0]) {\n                parts = arrSlice.call(parts, i++);\n                max -= 1;\n            }\n        }\n    }\n\n    return arrJoin.call(parts, '-');\n}\n\n/**\n * The DefaultLocale abstract operation returns a String value representing the\n * structurally valid (6.2.2) and canonicalized (6.2.3) BCP 47 language tag for the\n * host environment’s current locale.\n */\nexport function /* 6.2.4 */DefaultLocale () {\n    return defaultLocale;\n}\n\n// Sect 6.3 Currency Codes\n// =======================\n\nconst expCurrencyCode = /^[A-Z]{3}$/;\n\n/**\n * The IsWellFormedCurrencyCode abstract operation verifies that the currency argument\n * (after conversion to a String value) represents a well-formed 3-letter ISO currency\n * code. The following steps are taken:\n */\nexport function /* 6.3.1 */IsWellFormedCurrencyCode(currency) {\n    // 1. Let `c` be ToString(currency)\n    let c = String(currency);\n\n    // 2. Let `normalized` be the result of mapping c to upper case as described\n    //    in 6.1.\n    let normalized = toLatinUpperCase(c);\n\n    // 3. If the string length of normalized is not 3, return false.\n    // 4. If normalized contains any character that is not in the range \"A\" to \"Z\"\n    //    (U+0041 to U+005A), return false.\n    if (expCurrencyCode.test(normalized) === false)\n        return false;\n\n    // 5. Return true\n    return true;\n}\n","// Sect 9.2 Abstract Operations\n// ============================\n\nimport {\n    List,\n    toObject,\n    toLength,\n    arrIndexOf,\n    arrPush,\n    arrSlice,\n    Record,\n    hop,\n    defineProperty\n} from \"./util.js\";\n\nimport {\n    IsStructurallyValidLanguageTag,\n    CanonicalizeLanguageTag,\n    DefaultLocale\n} from \"./6.locales-currencies-tz.js\";\n\nconst expUnicodeExSeq = /-u(?:-[0-9a-z]{2,8})+/gi; // See `extension` below\n\nexport function /* 9.2.1 */CanonicalizeLocaleList (locales) {\n// The abstract operation CanonicalizeLocaleList takes the following steps:\n\n    // 1. If locales is undefined, then a. Return a new empty List\n    if (locales === undefined)\n        return new List();\n\n    // 2. Let seen be a new empty List.\n    let seen = new List();\n\n    // 3. If locales is a String value, then\n    //    a. Let locales be a new array created as if by the expression new\n    //    Array(locales) where Array is the standard built-in constructor with\n    //    that name and locales is the value of locales.\n    locales = typeof locales === 'string' ? [ locales ] : locales;\n\n    // 4. Let O be ToObject(locales).\n    let O = toObject(locales);\n\n    // 5. Let lenValue be the result of calling the [[Get]] internal method of\n    //    O with the argument \"length\".\n    // 6. Let len be ToUint32(lenValue).\n    let len = toLength(O.length);\n\n    // 7. Let k be 0.\n    let k = 0;\n\n    // 8. Repeat, while k < len\n    while (k < len) {\n        // a. Let Pk be ToString(k).\n        let Pk = String(k);\n\n        // b. Let kPresent be the result of calling the [[HasProperty]] internal\n        //    method of O with argument Pk.\n        let kPresent = Pk in O;\n\n        // c. If kPresent is true, then\n        if (kPresent) {\n            // i. Let kValue be the result of calling the [[Get]] internal\n            //     method of O with argument Pk.\n            let kValue = O[Pk];\n\n            // ii. If the type of kValue is not String or Object, then throw a\n            //     TypeError exception.\n            if (kValue === null || (typeof kValue !== 'string' && typeof kValue !== 'object'))\n                throw new TypeError('String or Object type expected');\n\n            // iii. Let tag be ToString(kValue).\n            let tag = String(kValue);\n\n            // iv. If the result of calling the abstract operation\n            //     IsStructurallyValidLanguageTag (defined in 6.2.2), passing tag as\n            //     the argument, is false, then throw a RangeError exception.\n            if (!IsStructurallyValidLanguageTag(tag))\n                throw new RangeError(\"'\" + tag + \"' is not a structurally valid language tag\");\n\n            // v. Let tag be the result of calling the abstract operation\n            //    CanonicalizeLanguageTag (defined in 6.2.3), passing tag as the\n            //    argument.\n            tag = CanonicalizeLanguageTag(tag);\n\n            // vi. If tag is not an element of seen, then append tag as the last\n            //     element of seen.\n            if (arrIndexOf.call(seen, tag) === -1)\n                arrPush.call(seen, tag);\n        }\n\n        // d. Increase k by 1.\n        k++;\n    }\n\n    // 9. Return seen.\n    return seen;\n}\n\n/**\n * The BestAvailableLocale abstract operation compares the provided argument\n * locale, which must be a String value with a structurally valid and\n * canonicalized BCP 47 language tag, against the locales in availableLocales and\n * returns either the longest non-empty prefix of locale that is an element of\n * availableLocales, or undefined if there is no such element. It uses the\n * fallback mechanism of RFC 4647, section 3.4. The following steps are taken:\n */\nexport function /* 9.2.2 */BestAvailableLocale (availableLocales, locale) {\n    // 1. Let candidate be locale\n    let candidate = locale;\n\n    // 2. Repeat\n    while (candidate) {\n        // a. If availableLocales contains an element equal to candidate, then return\n        // candidate.\n        if (arrIndexOf.call(availableLocales, candidate) > -1)\n            return candidate;\n\n        // b. Let pos be the character index of the last occurrence of \"-\"\n        // (U+002D) within candidate. If that character does not occur, return\n        // undefined.\n        let pos = candidate.lastIndexOf('-');\n\n        if (pos < 0)\n            return;\n\n        // c. If pos ≥ 2 and the character \"-\" occurs at index pos-2 of candidate,\n        //    then decrease pos by 2.\n        if (pos >= 2 && candidate.charAt(pos - 2) === '-')\n            pos -= 2;\n\n        // d. Let candidate be the substring of candidate from position 0, inclusive,\n        //    to position pos, exclusive.\n        candidate = candidate.substring(0, pos);\n    }\n}\n\n/**\n * The LookupMatcher abstract operation compares requestedLocales, which must be\n * a List as returned by CanonicalizeLocaleList, against the locales in\n * availableLocales and determines the best available language to meet the\n * request. The following steps are taken:\n */\nexport function /* 9.2.3 */LookupMatcher (availableLocales, requestedLocales) {\n    // 1. Let i be 0.\n    let i = 0;\n\n    // 2. Let len be the number of elements in requestedLocales.\n    let len = requestedLocales.length;\n\n    // 3. Let availableLocale be undefined.\n    let availableLocale;\n\n    let locale, noExtensionsLocale;\n\n    // 4. Repeat while i < len and availableLocale is undefined:\n    while (i < len && !availableLocale) {\n        // a. Let locale be the element of requestedLocales at 0-origined list\n        //    position i.\n        locale = requestedLocales[i];\n\n        // b. Let noExtensionsLocale be the String value that is locale with all\n        //    Unicode locale extension sequences removed.\n        noExtensionsLocale = String(locale).replace(expUnicodeExSeq, '');\n\n        // c. Let availableLocale be the result of calling the\n        //    BestAvailableLocale abstract operation (defined in 9.2.2) with\n        //    arguments availableLocales and noExtensionsLocale.\n        availableLocale = BestAvailableLocale(availableLocales, noExtensionsLocale);\n\n        // d. Increase i by 1.\n        i++;\n    }\n\n    // 5. Let result be a new Record.\n    let result = new Record();\n\n    // 6. If availableLocale is not undefined, then\n    if (availableLocale !== undefined) {\n        // a. Set result.[[locale]] to availableLocale.\n        result['[[locale]]'] = availableLocale;\n\n        // b. If locale and noExtensionsLocale are not the same String value, then\n        if (String(locale) !== String(noExtensionsLocale)) {\n            // i. Let extension be the String value consisting of the first\n            //    substring of locale that is a Unicode locale extension sequence.\n            let extension = locale.match(expUnicodeExSeq)[0];\n\n            // ii. Let extensionIndex be the character position of the initial\n            //     \"-\" of the first Unicode locale extension sequence within locale.\n            let extensionIndex = locale.indexOf('-u-');\n\n            // iii. Set result.[[extension]] to extension.\n            result['[[extension]]'] = extension;\n\n            // iv. Set result.[[extensionIndex]] to extensionIndex.\n            result['[[extensionIndex]]'] = extensionIndex;\n        }\n    }\n    // 7. Else\n    else\n        // a. Set result.[[locale]] to the value returned by the DefaultLocale abstract\n        //    operation (defined in 6.2.4).\n        result['[[locale]]'] = DefaultLocale();\n\n    // 8. Return result\n    return result;\n}\n\n/**\n * The BestFitMatcher abstract operation compares requestedLocales, which must be\n * a List as returned by CanonicalizeLocaleList, against the locales in\n * availableLocales and determines the best available language to meet the\n * request. The algorithm is implementation dependent, but should produce results\n * that a typical user of the requested locales would perceive as at least as\n * good as those produced by the LookupMatcher abstract operation. Options\n * specified through Unicode locale extension sequences must be ignored by the\n * algorithm. Information about such subsequences is returned separately.\n * The abstract operation returns a record with a [[locale]] field, whose value\n * is the language tag of the selected locale, which must be an element of\n * availableLocales. If the language tag of the request locale that led to the\n * selected locale contained a Unicode locale extension sequence, then the\n * returned record also contains an [[extension]] field whose value is the first\n * Unicode locale extension sequence, and an [[extensionIndex]] field whose value\n * is the index of the first Unicode locale extension sequence within the request\n * locale language tag.\n */\nexport function /* 9.2.4 */BestFitMatcher (availableLocales, requestedLocales) {\n    return LookupMatcher(availableLocales, requestedLocales);\n}\n\n// @spec[tc39/ecma402/master/spec/negotiation.html]\n// @clause[sec-unicodeextensionsubtags]\nexport function UnicodeExtensionSubtags(extension) {\n    // 1. Let size be the number of elements in extension.\n    let size = extension.length;\n    // 2. If size = 0, then\n    if (size === 0) {\n        // a. Return « ».\n        return [];\n    }\n    // 3. Let extensionSubtags be « ».\n    let extensionSubtags = [];\n    // 4. Let attribute be true.\n    let attribute = true;\n    // 5. Let q be 3.\n    let q = 3;\n    // 6. Let p be q.\n    let p = q;\n    // 7. Let t be q.\n    let t = q;\n    // 8. Repeat, while q < size\n    while (q < size) {\n        // a. Let c be the code unit value of the element at index q in the String extension.\n        let c = extension.codePointAt(q);\n        // a. If c is 0x002D (HYPHEN-MINUS), then\n        if (c === 0x002D) {\n            // i. If q - p = 2, then\n            if (q - p === 2) {\n                // 1. If p - t > 1, then\n                if (p - t > 1) {\n                    // a. Let type be a String value equal to the substring of extension consisting of the code units at indices t (inclusive) through p - 1 (exclusive).\n                    let type = extension.substring(t, p - 1);\n                    // a. Append type as the last element of extensionSubtags.\n                    extensionSubtags.push(type);\n                }\n                // 2. Let key be a String value equal to the substring of extension consisting of the code units at indices p (inclusive) through q (exclusive).\n                let key = extension.substring(p, q);\n                // 3. Append key as the last element of extensionSubtags.\n                extensionSubtags.push(key);\n                // 4. Let t be q + 1.\n                t = q + 1;\n                // 5. Let attribute be false.\n                attribute = false;\n            // ii. Else if attribute is true, then\n            } else if (attribute === true) {\n                // 1. Let attr be a String value equal to the substring of extension consisting of the code units at indices p (inclusive) through q (exclusive).\n                let attr = extension.substring(p, q);\n                // 2. Append attr as the last element of extensionSubtags.\n                extensionSubtags.push(attr);\n                // 3. Let t be q + 1.\n                t = q + 1;\n            }\n            // iii. Let p be q + 1.\n            p = q + 1;\n        }\n        // a. Let q be q + 1.\n        q = q + 1;\n    }\n    // 9. If size - p = 2, then\n    if (size - p === 2) {\n        // a. If p - t > 1, then\n        if (p - t > 1) {\n            // i. Let type be a String value equal to the substring of extension consisting of the code units at indices t (inclusive) through p - 1 (exclusive).\n            let type = extension.substring(t, p - 1);\n            // ii. Append type as the last element of extensionSubtags.\n            extensionSubtags.push(type);\n        }\n        // a. Let t be p.\n        t = p;\n    }\n    // 10. Let tail be a String value equal to the substring of extension consisting of the code units at indices t (inclusive) through size (exclusive).\n    let tail = extension.substring(t, size);\n    // 11. Append tail as the last element of extensionSubtags.\n    extensionSubtags.push(tail);\n    // 12. Return extensionSubtags.\n    return extensionSubtags;\n}\n\n/**\n * The ResolveLocale abstract operation compares a BCP 47 language priority list\n * requestedLocales against the locales in availableLocales and determines the\n * best available language to meet the request. availableLocales and\n * requestedLocales must be provided as List values, options as a Record.\n */\nexport function /* 9.2.5 */ResolveLocale (availableLocales, requestedLocales, options, relevantExtensionKeys, localeData) {\n    if (availableLocales.length === 0) {\n        throw new ReferenceError('No locale data has been provided for this object yet.');\n    }\n\n    // The following steps are taken:\n    // 1. Let matcher be the value of options.[[localeMatcher]].\n    let matcher = options['[[localeMatcher]]'];\n\n    let r;\n\n    // 2. If matcher is \"lookup\", then\n    if (matcher === 'lookup')\n        // a. Let r be the result of calling the LookupMatcher abstract operation\n        //    (defined in 9.2.3) with arguments availableLocales and\n        //    requestedLocales.\n        r = LookupMatcher(availableLocales, requestedLocales);\n\n    // 3. Else\n    else\n        // a. Let r be the result of calling the BestFitMatcher abstract\n        //    operation (defined in 9.2.4) with arguments availableLocales and\n        //    requestedLocales.\n        r = BestFitMatcher(availableLocales, requestedLocales);\n\n    // 4. Let foundLocale be the value of r.[[locale]].\n    let foundLocale = r['[[locale]]'];\n\n    let extensionSubtags, extensionSubtagsLength;\n\n    // 5. If r has an [[extension]] field, then\n    if (hop.call(r, '[[extension]]')) {\n        // a. Let extension be the value of r.[[extension]].\n        let extension = r['[[extension]]'];\n        // b. Let _extensionSubtags_ be\n        // CreateArrayFromList(UnicodeExtensionSubtags(_extension_)).\n        extensionSubtags = UnicodeExtensionSubtags(extension);\n        // c. Let _extensionSubtagsLength_ be Get(_extensionSubtags_, *\"length\"*)\n        extensionSubtagsLength = extensionSubtags.length;\n    }\n\n    // 6. Let result be a new Record.\n    let result = new Record();\n\n    // 7. Set result.[[dataLocale]] to foundLocale.\n    result['[[dataLocale]]'] = foundLocale;\n\n    // 8. Let supportedExtension be \"-u\".\n    let supportedExtension = '-u';\n    // 9. Let i be 0.\n    let i = 0;\n    // 10. Let len be the result of calling the [[Get]] internal method of\n    //     relevantExtensionKeys with argument \"length\".\n    let len = relevantExtensionKeys.length;\n\n    // 11 Repeat while i < len:\n    while (i < len) {\n        // a. Let key be the result of calling the [[Get]] internal method of\n        //    relevantExtensionKeys with argument ToString(i).\n        let key = relevantExtensionKeys[i];\n        // b. Let foundLocaleData be the result of calling the [[Get]] internal\n        //    method of localeData with the argument foundLocale.\n        let foundLocaleData = localeData[foundLocale];\n        // c. Let keyLocaleData be the result of calling the [[Get]] internal\n        //    method of foundLocaleData with the argument key.\n        let keyLocaleData = foundLocaleData[key];\n        // d. Let value be the result of calling the [[Get]] internal method of\n        //    keyLocaleData with argument \"0\".\n        let value = keyLocaleData['0'];\n        // e. Let supportedExtensionAddition be \"\".\n        let supportedExtensionAddition = '';\n        // f. Let indexOf be the standard built-in function object defined in\n        //    ES5, 15.4.4.14.\n        let indexOf = arrIndexOf;\n\n        // g. If extensionSubtags is not undefined, then\n        if (extensionSubtags !== undefined) {\n            // i. Let keyPos be the result of calling the [[Call]] internal\n            //    method of indexOf with extensionSubtags as the this value and\n            // an argument list containing the single item key.\n            let keyPos = indexOf.call(extensionSubtags, key);\n\n            // ii. If keyPos ≠ -1, then\n            if (keyPos !== -1) {\n                // 1. If keyPos + 1 < extensionSubtagsLength and the length of the\n                //    result of calling the [[Get]] internal method of\n                //    extensionSubtags with argument ToString(keyPos +1) is greater\n                //    than 2, then\n                if (keyPos + 1 < extensionSubtagsLength\n                        && extensionSubtags[keyPos + 1].length > 2) {\n                    // a. Let requestedValue be the result of calling the [[Get]]\n                    //    internal method of extensionSubtags with argument\n                    //    ToString(keyPos + 1).\n                    let requestedValue = extensionSubtags[keyPos + 1];\n                    // b. Let valuePos be the result of calling the [[Call]]\n                    //    internal method of indexOf with keyLocaleData as the\n                    //    this value and an argument list containing the single\n                    //    item requestedValue.\n                    let valuePos = indexOf.call(keyLocaleData, requestedValue);\n\n                    // c. If valuePos ≠ -1, then\n                    if (valuePos !== -1) {\n                        // i. Let value be requestedValue.\n                        value = requestedValue,\n                        // ii. Let supportedExtensionAddition be the\n                        //     concatenation of \"-\", key, \"-\", and value.\n                        supportedExtensionAddition = '-' + key + '-' + value;\n                    }\n                }\n                // 2. Else\n                else {\n                    // a. Let valuePos be the result of calling the [[Call]]\n                    // internal method of indexOf with keyLocaleData as the this\n                    // value and an argument list containing the single item\n                    // \"true\".\n                    let valuePos = indexOf(keyLocaleData, 'true');\n\n                    // b. If valuePos ≠ -1, then\n                    if (valuePos !== -1)\n                        // i. Let value be \"true\".\n                        value = 'true';\n                }\n            }\n        }\n        // h. If options has a field [[<key>]], then\n        if (hop.call(options, '[[' + key + ']]')) {\n            // i. Let optionsValue be the value of options.[[<key>]].\n            let optionsValue = options['[[' + key + ']]'];\n\n            // ii. If the result of calling the [[Call]] internal method of indexOf\n            //     with keyLocaleData as the this value and an argument list\n            //     containing the single item optionsValue is not -1, then\n            if (indexOf.call(keyLocaleData, optionsValue) !== -1) {\n                // 1. If optionsValue is not equal to value, then\n                if (optionsValue !== value) {\n                    // a. Let value be optionsValue.\n                    value = optionsValue;\n                    // b. Let supportedExtensionAddition be \"\".\n                    supportedExtensionAddition = '';\n                }\n            }\n        }\n        // i. Set result.[[<key>]] to value.\n        result['[[' + key + ']]'] = value;\n\n        // j. Append supportedExtensionAddition to supportedExtension.\n        supportedExtension += supportedExtensionAddition;\n\n        // k. Increase i by 1.\n        i++;\n    }\n    // 12. If the length of supportedExtension is greater than 2, then\n    if (supportedExtension.length > 2) {\n        // a.\n        let privateIndex = foundLocale.indexOf(\"-x-\");\n        // b.\n        if (privateIndex === -1) {\n            // i.\n            foundLocale = foundLocale + supportedExtension;\n        }\n        // c.\n        else {\n            // i.\n            let preExtension = foundLocale.substring(0, privateIndex);\n            // ii.\n            let postExtension = foundLocale.substring(privateIndex);\n            // iii.\n            foundLocale = preExtension + supportedExtension + postExtension;\n        }\n        // d. asserting - skipping\n        // e.\n        foundLocale = CanonicalizeLanguageTag(foundLocale);\n    }\n    // 13. Set result.[[locale]] to foundLocale.\n    result['[[locale]]'] = foundLocale;\n\n    // 14. Return result.\n    return result;\n}\n\n/**\n * The LookupSupportedLocales abstract operation returns the subset of the\n * provided BCP 47 language priority list requestedLocales for which\n * availableLocales has a matching locale when using the BCP 47 Lookup algorithm.\n * Locales appear in the same order in the returned list as in requestedLocales.\n * The following steps are taken:\n */\nexport function /* 9.2.6 */LookupSupportedLocales (availableLocales, requestedLocales) {\n    // 1. Let len be the number of elements in requestedLocales.\n    let len = requestedLocales.length;\n    // 2. Let subset be a new empty List.\n    let subset = new List();\n    // 3. Let k be 0.\n    let k = 0;\n\n    // 4. Repeat while k < len\n    while (k < len) {\n        // a. Let locale be the element of requestedLocales at 0-origined list\n        //    position k.\n        let locale = requestedLocales[k];\n        // b. Let noExtensionsLocale be the String value that is locale with all\n        //    Unicode locale extension sequences removed.\n        let noExtensionsLocale = String(locale).replace(expUnicodeExSeq, '');\n        // c. Let availableLocale be the result of calling the\n        //    BestAvailableLocale abstract operation (defined in 9.2.2) with\n        //    arguments availableLocales and noExtensionsLocale.\n        let availableLocale = BestAvailableLocale(availableLocales, noExtensionsLocale);\n\n        // d. If availableLocale is not undefined, then append locale to the end of\n        //    subset.\n        if (availableLocale !== undefined)\n            arrPush.call(subset, locale);\n\n        // e. Increment k by 1.\n        k++;\n    }\n\n    // 5. Let subsetArray be a new Array object whose elements are the same\n    //    values in the same order as the elements of subset.\n    let subsetArray = arrSlice.call(subset);\n\n    // 6. Return subsetArray.\n    return subsetArray;\n}\n\n/**\n * The BestFitSupportedLocales abstract operation returns the subset of the\n * provided BCP 47 language priority list requestedLocales for which\n * availableLocales has a matching locale when using the Best Fit Matcher\n * algorithm. Locales appear in the same order in the returned list as in\n * requestedLocales. The steps taken are implementation dependent.\n */\nexport function /*9.2.7 */BestFitSupportedLocales (availableLocales, requestedLocales) {\n    // ###TODO: implement this function as described by the specification###\n    return LookupSupportedLocales(availableLocales, requestedLocales);\n}\n\n/**\n * The SupportedLocales abstract operation returns the subset of the provided BCP\n * 47 language priority list requestedLocales for which availableLocales has a\n * matching locale. Two algorithms are available to match the locales: the Lookup\n * algorithm described in RFC 4647 section 3.4, and an implementation dependent\n * best-fit algorithm. Locales appear in the same order in the returned list as\n * in requestedLocales. The following steps are taken:\n */\nexport function /*9.2.8 */SupportedLocales (availableLocales, requestedLocales, options) {\n    let matcher, subset;\n\n    // 1. If options is not undefined, then\n    if (options !== undefined) {\n        // a. Let options be ToObject(options).\n        options = new Record(toObject(options));\n        // b. Let matcher be the result of calling the [[Get]] internal method of\n        //    options with argument \"localeMatcher\".\n        matcher = options.localeMatcher;\n\n        // c. If matcher is not undefined, then\n        if (matcher !== undefined) {\n            // i. Let matcher be ToString(matcher).\n            matcher = String(matcher);\n\n            // ii. If matcher is not \"lookup\" or \"best fit\", then throw a RangeError\n            //     exception.\n            if (matcher !== 'lookup' && matcher !== 'best fit')\n                throw new RangeError('matcher should be \"lookup\" or \"best fit\"');\n        }\n    }\n    // 2. If matcher is undefined or \"best fit\", then\n    if (matcher === undefined || matcher === 'best fit')\n        // a. Let subset be the result of calling the BestFitSupportedLocales\n        //    abstract operation (defined in 9.2.7) with arguments\n        //    availableLocales and requestedLocales.\n        subset = BestFitSupportedLocales(availableLocales, requestedLocales);\n    // 3. Else\n    else\n        // a. Let subset be the result of calling the LookupSupportedLocales\n        //    abstract operation (defined in 9.2.6) with arguments\n        //    availableLocales and requestedLocales.\n        subset = LookupSupportedLocales(availableLocales, requestedLocales);\n\n    // 4. For each named own property name P of subset,\n    for (let P in subset) {\n        if (!hop.call(subset, P))\n            continue;\n\n        // a. Let desc be the result of calling the [[GetOwnProperty]] internal\n        //    method of subset with P.\n        // b. Set desc.[[Writable]] to false.\n        // c. Set desc.[[Configurable]] to false.\n        // d. Call the [[DefineOwnProperty]] internal method of subset with P, desc,\n        //    and true as arguments.\n        defineProperty(subset, P, {\n            writable: false, configurable: false, value: subset[P]\n        });\n    }\n    // \"Freeze\" the array so no new elements can be added\n    defineProperty(subset, 'length', { writable: false });\n\n    // 5. Return subset\n    return subset;\n}\n\n/**\n * The GetOption abstract operation extracts the value of the property named\n * property from the provided options object, converts it to the required type,\n * checks whether it is one of a List of allowed values, and fills in a fallback\n * value if necessary.\n */\nexport function /*9.2.9 */GetOption (options, property, type, values, fallback) {\n    // 1. Let value be the result of calling the [[Get]] internal method of\n    //    options with argument property.\n    let value = options[property];\n\n    // 2. If value is not undefined, then\n    if (value !== undefined) {\n        // a. Assert: type is \"boolean\" or \"string\".\n        // b. If type is \"boolean\", then let value be ToBoolean(value).\n        // c. If type is \"string\", then let value be ToString(value).\n        value = type === 'boolean' ? Boolean(value)\n                  : (type === 'string' ? String(value) : value);\n\n        // d. If values is not undefined, then\n        if (values !== undefined) {\n            // i. If values does not contain an element equal to value, then throw a\n            //    RangeError exception.\n            if (arrIndexOf.call(values, value) === -1)\n                throw new RangeError(\"'\" + value + \"' is not an allowed value for `\" + property +'`');\n        }\n\n        // e. Return value.\n        return value;\n    }\n    // Else return fallback.\n    return fallback;\n}\n\n/**\n * The GetNumberOption abstract operation extracts a property value from the\n * provided options object, converts it to a Number value, checks whether it is\n * in the allowed range, and fills in a fallback value if necessary.\n */\nexport function /* 9.2.10 */GetNumberOption (options, property, minimum, maximum, fallback) {\n    // 1. Let value be the result of calling the [[Get]] internal method of\n    //    options with argument property.\n    let value = options[property];\n\n    // 2. If value is not undefined, then\n    if (value !== undefined) {\n        // a. Let value be ToNumber(value).\n        value = Number(value);\n\n        // b. If value is NaN or less than minimum or greater than maximum, throw a\n        //    RangeError exception.\n        if (isNaN(value) || value < minimum || value > maximum)\n            throw new RangeError('Value is not a number or outside accepted range');\n\n        // c. Return floor(value).\n        return Math.floor(value);\n    }\n    // 3. Else return fallback.\n    return fallback;\n}\n","import {\n    CanonicalizeLocaleList\n} from \"./9.negotiation.js\";\n\n// 8 The Intl Object\nexport const Intl = {};\n\n// 8.2 Function Properties of the Intl Object\n\n// 8.2.1\n// @spec[tc39/ecma402/master/spec/intl.html]\n// @clause[sec-intl.getcanonicallocales]\nfunction getCanonicalLocales (locales) {\n    // 1. Let ll be ? CanonicalizeLocaleList(locales).\n    let ll = CanonicalizeLocaleList(locales);\n    // 2. Return CreateArrayFromList(ll).\n    {\n        let result = [];\n\n        let len = ll.length;\n        let k = 0;\n\n        while (k < len) {\n            result[k] = ll[k];\n            k++;\n        }\n        return result;\n    }\n}\n\nObject.defineProperty(Intl, 'getCanonicalLocales', {\n  enumerable: false,\n  configurable: true,\n  writable: true,\n  value: getCanonicalLocales\n});\n","// 11.1 The Intl.NumberFormat constructor\n// ======================================\n\nimport {\n    IsWellFormedCurrencyCode\n} from \"./6.locales-currencies-tz.js\";\n\nimport {\n    Intl\n} from \"./8.intl.js\";\n\nimport {\n    CanonicalizeLocaleList,\n    SupportedLocales,\n    ResolveLocale,\n    GetNumberOption,\n    GetOption\n} from \"./9.negotiation.js\";\n\nimport {\n    internals,\n    log10Floor,\n    List,\n    toObject,\n    arrPush,\n    arrJoin,\n    arrShift,\n    Record,\n    hop,\n    defineProperty,\n    es3,\n    fnBind,\n    getInternalProperties,\n    createRegExpRestore,\n    secret,\n    objCreate\n} from \"./util.js\";\n\n// Currency minor units output from get-4217 grunt task, formatted\nconst currencyMinorUnits = {\n    BHD: 3, BYR: 0, XOF: 0, BIF: 0, XAF: 0, CLF: 4, CLP: 0, KMF: 0, DJF: 0,\n    XPF: 0, GNF: 0, ISK: 0, IQD: 3, JPY: 0, JOD: 3, KRW: 0, KWD: 3, LYD: 3,\n    OMR: 3, PYG: 0, RWF: 0, TND: 3, UGX: 0, UYI: 0, VUV: 0, VND: 0\n};\n\n// Define the NumberFormat constructor internally so it cannot be tainted\nexport function NumberFormatConstructor () {\n    let locales = arguments[0];\n    let options = arguments[1];\n\n    if (!this || this === Intl) {\n        return new Intl.NumberFormat(locales, options);\n    }\n\n    return InitializeNumberFormat(toObject(this), locales, options);\n}\n\ndefineProperty(Intl, 'NumberFormat', {\n    configurable: true,\n    writable: true,\n    value: NumberFormatConstructor\n});\n\n// Must explicitly set prototypes as unwritable\ndefineProperty(Intl.NumberFormat, 'prototype', {\n    writable: false\n});\n\n/**\n * The abstract operation InitializeNumberFormat accepts the arguments\n * numberFormat (which must be an object), locales, and options. It initializes\n * numberFormat as a NumberFormat object.\n */\nexport function /*11.1.1.1 */InitializeNumberFormat (numberFormat, locales, options) {\n    // This will be a internal properties object if we're not already initialized\n    let internal = getInternalProperties(numberFormat);\n\n    // Create an object whose props can be used to restore the values of RegExp props\n    let regexpRestore = createRegExpRestore();\n\n    // 1. If numberFormat has an [[initializedIntlObject]] internal property with\n    // value true, throw a TypeError exception.\n    if (internal['[[initializedIntlObject]]'] === true)\n        throw new TypeError('`this` object has already been initialized as an Intl object');\n\n    // Need this to access the `internal` object\n    defineProperty(numberFormat, '__getInternalProperties', {\n        value: function () {\n            // NOTE: Non-standard, for internal use only\n            if (arguments[0] === secret)\n                return internal;\n        }\n    });\n\n    // 2. Set the [[initializedIntlObject]] internal property of numberFormat to true.\n    internal['[[initializedIntlObject]]'] = true;\n\n    // 3. Let requestedLocales be the result of calling the CanonicalizeLocaleList\n    //    abstract operation (defined in 9.2.1) with argument locales.\n    let requestedLocales = CanonicalizeLocaleList(locales);\n\n    // 4. If options is undefined, then\n    if (options === undefined)\n        // a. Let options be the result of creating a new object as if by the\n        // expression new Object() where Object is the standard built-in constructor\n        // with that name.\n        options = {};\n\n    // 5. Else\n    else\n        // a. Let options be ToObject(options).\n        options = toObject(options);\n\n    // 6. Let opt be a new Record.\n    let opt = new Record(),\n\n    // 7. Let matcher be the result of calling the GetOption abstract operation\n    //    (defined in 9.2.9) with the arguments options, \"localeMatcher\", \"string\",\n    //    a List containing the two String values \"lookup\" and \"best fit\", and\n    //    \"best fit\".\n        matcher =  GetOption(options, 'localeMatcher', 'string', new List('lookup', 'best fit'), 'best fit');\n\n    // 8. Set opt.[[localeMatcher]] to matcher.\n    opt['[[localeMatcher]]'] = matcher;\n\n    // 9. Let NumberFormat be the standard built-in object that is the initial value\n    //    of Intl.NumberFormat.\n    // 10. Let localeData be the value of the [[localeData]] internal property of\n    //     NumberFormat.\n    let localeData = internals.NumberFormat['[[localeData]]'];\n\n    // 11. Let r be the result of calling the ResolveLocale abstract operation\n    //     (defined in 9.2.5) with the [[availableLocales]] internal property of\n    //     NumberFormat, requestedLocales, opt, the [[relevantExtensionKeys]]\n    //     internal property of NumberFormat, and localeData.\n    let r = ResolveLocale(\n            internals.NumberFormat['[[availableLocales]]'], requestedLocales,\n            opt, internals.NumberFormat['[[relevantExtensionKeys]]'], localeData\n        );\n\n    // 12. Set the [[locale]] internal property of numberFormat to the value of\n    //     r.[[locale]].\n    internal['[[locale]]'] = r['[[locale]]'];\n\n    // 13. Set the [[numberingSystem]] internal property of numberFormat to the value\n    //     of r.[[nu]].\n    internal['[[numberingSystem]]'] = r['[[nu]]'];\n\n    // The specification doesn't tell us to do this, but it's helpful later on\n    internal['[[dataLocale]]'] = r['[[dataLocale]]'];\n\n    // 14. Let dataLocale be the value of r.[[dataLocale]].\n    let dataLocale = r['[[dataLocale]]'];\n\n    // 15. Let s be the result of calling the GetOption abstract operation with the\n    //     arguments options, \"style\", \"string\", a List containing the three String\n    //     values \"decimal\", \"percent\", and \"currency\", and \"decimal\".\n    let s = GetOption(options, 'style', 'string', new List('decimal', 'percent', 'currency'), 'decimal');\n\n    // 16. Set the [[style]] internal property of numberFormat to s.\n    internal['[[style]]'] = s;\n\n    // 17. Let c be the result of calling the GetOption abstract operation with the\n    //     arguments options, \"currency\", \"string\", undefined, and undefined.\n    let c = GetOption(options, 'currency', 'string');\n\n    // 18. If c is not undefined and the result of calling the\n    //     IsWellFormedCurrencyCode abstract operation (defined in 6.3.1) with\n    //     argument c is false, then throw a RangeError exception.\n    if (c !== undefined && !IsWellFormedCurrencyCode(c))\n        throw new RangeError(\"'\" + c + \"' is not a valid currency code\");\n\n    // 19. If s is \"currency\" and c is undefined, throw a TypeError exception.\n    if (s === 'currency' && c === undefined)\n        throw new TypeError('Currency code is required when style is currency');\n\n    let cDigits;\n\n    // 20. If s is \"currency\", then\n    if (s === 'currency') {\n        // a. Let c be the result of converting c to upper case as specified in 6.1.\n        c = c.toUpperCase();\n\n        // b. Set the [[currency]] internal property of numberFormat to c.\n        internal['[[currency]]'] = c;\n\n        // c. Let cDigits be the result of calling the CurrencyDigits abstract\n        //    operation (defined below) with argument c.\n        cDigits = CurrencyDigits(c);\n    }\n\n    // 21. Let cd be the result of calling the GetOption abstract operation with the\n    //     arguments options, \"currencyDisplay\", \"string\", a List containing the\n    //     three String values \"code\", \"symbol\", and \"name\", and \"symbol\".\n    let cd = GetOption(options, 'currencyDisplay', 'string', new List('code', 'symbol', 'name'), 'symbol');\n\n    // 22. If s is \"currency\", then set the [[currencyDisplay]] internal property of\n    //     numberFormat to cd.\n    if (s === 'currency')\n        internal['[[currencyDisplay]]'] = cd;\n\n    // 23. Let mnid be the result of calling the GetNumberOption abstract operation\n    //     (defined in 9.2.10) with arguments options, \"minimumIntegerDigits\", 1, 21,\n    //     and 1.\n    let mnid = GetNumberOption(options, 'minimumIntegerDigits', 1, 21, 1);\n\n    // 24. Set the [[minimumIntegerDigits]] internal property of numberFormat to mnid.\n    internal['[[minimumIntegerDigits]]'] = mnid;\n\n    // 25. If s is \"currency\", then let mnfdDefault be cDigits; else let mnfdDefault\n    //     be 0.\n    let mnfdDefault = s === 'currency' ? cDigits : 0;\n\n    // 26. Let mnfd be the result of calling the GetNumberOption abstract operation\n    //     with arguments options, \"minimumFractionDigits\", 0, 20, and mnfdDefault.\n    let mnfd = GetNumberOption(options, 'minimumFractionDigits', 0, 20, mnfdDefault);\n\n    // 27. Set the [[minimumFractionDigits]] internal property of numberFormat to mnfd.\n    internal['[[minimumFractionDigits]]'] = mnfd;\n\n    // 28. If s is \"currency\", then let mxfdDefault be max(mnfd, cDigits); else if s\n    //     is \"percent\", then let mxfdDefault be max(mnfd, 0); else let mxfdDefault\n    //     be max(mnfd, 3).\n    let mxfdDefault = s === 'currency' ? Math.max(mnfd, cDigits)\n                    : (s === 'percent' ? Math.max(mnfd, 0) : Math.max(mnfd, 3));\n\n    // 29. Let mxfd be the result of calling the GetNumberOption abstract operation\n    //     with arguments options, \"maximumFractionDigits\", mnfd, 20, and mxfdDefault.\n    let mxfd = GetNumberOption(options, 'maximumFractionDigits', mnfd, 20, mxfdDefault);\n\n    // 30. Set the [[maximumFractionDigits]] internal property of numberFormat to mxfd.\n    internal['[[maximumFractionDigits]]'] = mxfd;\n\n    // 31. Let mnsd be the result of calling the [[Get]] internal method of options\n    //     with argument \"minimumSignificantDigits\".\n    let mnsd = options.minimumSignificantDigits;\n\n    // 32. Let mxsd be the result of calling the [[Get]] internal method of options\n    //     with argument \"maximumSignificantDigits\".\n    let mxsd = options.maximumSignificantDigits;\n\n    // 33. If mnsd is not undefined or mxsd is not undefined, then:\n    if (mnsd !== undefined || mxsd !== undefined) {\n        // a. Let mnsd be the result of calling the GetNumberOption abstract\n        //    operation with arguments options, \"minimumSignificantDigits\", 1, 21,\n        //    and 1.\n        mnsd = GetNumberOption(options, 'minimumSignificantDigits', 1, 21, 1);\n\n        // b. Let mxsd be the result of calling the GetNumberOption abstract\n        //     operation with arguments options, \"maximumSignificantDigits\", mnsd,\n        //     21, and 21.\n        mxsd = GetNumberOption(options, 'maximumSignificantDigits', mnsd, 21, 21);\n\n        // c. Set the [[minimumSignificantDigits]] internal property of numberFormat\n        //    to mnsd, and the [[maximumSignificantDigits]] internal property of\n        //    numberFormat to mxsd.\n        internal['[[minimumSignificantDigits]]'] = mnsd;\n        internal['[[maximumSignificantDigits]]'] = mxsd;\n    }\n    // 34. Let g be the result of calling the GetOption abstract operation with the\n    //     arguments options, \"useGrouping\", \"boolean\", undefined, and true.\n    let g = GetOption(options, 'useGrouping', 'boolean', undefined, true);\n\n    // 35. Set the [[useGrouping]] internal property of numberFormat to g.\n    internal['[[useGrouping]]'] = g;\n\n    // 36. Let dataLocaleData be the result of calling the [[Get]] internal method of\n    //     localeData with argument dataLocale.\n    let dataLocaleData = localeData[dataLocale];\n\n    // 37. Let patterns be the result of calling the [[Get]] internal method of\n    //     dataLocaleData with argument \"patterns\".\n    let patterns = dataLocaleData.patterns;\n\n    // 38. Assert: patterns is an object (see 11.2.3)\n\n    // 39. Let stylePatterns be the result of calling the [[Get]] internal method of\n    //     patterns with argument s.\n    let stylePatterns = patterns[s];\n\n    // 40. Set the [[positivePattern]] internal property of numberFormat to the\n    //     result of calling the [[Get]] internal method of stylePatterns with the\n    //     argument \"positivePattern\".\n    internal['[[positivePattern]]'] = stylePatterns.positivePattern;\n\n    // 41. Set the [[negativePattern]] internal property of numberFormat to the\n    //     result of calling the [[Get]] internal method of stylePatterns with the\n    //     argument \"negativePattern\".\n    internal['[[negativePattern]]'] = stylePatterns.negativePattern;\n\n    // 42. Set the [[boundFormat]] internal property of numberFormat to undefined.\n    internal['[[boundFormat]]'] = undefined;\n\n    // 43. Set the [[initializedNumberFormat]] internal property of numberFormat to\n    //     true.\n    internal['[[initializedNumberFormat]]'] = true;\n\n    // In ES3, we need to pre-bind the format() function\n    if (es3)\n        numberFormat.format = GetFormatNumber.call(numberFormat);\n\n    // Restore the RegExp properties\n    regexpRestore();\n\n    // Return the newly initialised object\n    return numberFormat;\n}\n\nfunction CurrencyDigits(currency) {\n    // When the CurrencyDigits abstract operation is called with an argument currency\n    // (which must be an upper case String value), the following steps are taken:\n\n    // 1. If the ISO 4217 currency and funds code list contains currency as an\n    // alphabetic code, then return the minor unit value corresponding to the\n    // currency from the list; else return 2.\n    return currencyMinorUnits[currency] !== undefined\n                ? currencyMinorUnits[currency]\n                : 2;\n}\n\n/* 11.2.3 */internals.NumberFormat = {\n    '[[availableLocales]]': [],\n    '[[relevantExtensionKeys]]': ['nu'],\n    '[[localeData]]': {}\n};\n\n/**\n * When the supportedLocalesOf method of Intl.NumberFormat is called, the\n * following steps are taken:\n */\n/* 11.2.2 */\ndefineProperty(Intl.NumberFormat, 'supportedLocalesOf', {\n    configurable: true,\n    writable: true,\n    value: fnBind.call(function (locales) {\n        // Bound functions only have the `this` value altered if being used as a constructor,\n        // this lets us imitate a native function that has no constructor\n        if (!hop.call(this, '[[availableLocales]]'))\n            throw new TypeError('supportedLocalesOf() is not a constructor');\n\n        // Create an object whose props can be used to restore the values of RegExp props\n        let regexpRestore = createRegExpRestore(),\n\n        // 1. If options is not provided, then let options be undefined.\n            options = arguments[1],\n\n        // 2. Let availableLocales be the value of the [[availableLocales]] internal\n        //    property of the standard built-in object that is the initial value of\n        //    Intl.NumberFormat.\n\n            availableLocales = this['[[availableLocales]]'],\n\n        // 3. Let requestedLocales be the result of calling the CanonicalizeLocaleList\n        //    abstract operation (defined in 9.2.1) with argument locales.\n            requestedLocales = CanonicalizeLocaleList(locales);\n\n        // Restore the RegExp properties\n        regexpRestore();\n\n        // 4. Return the result of calling the SupportedLocales abstract operation\n        //    (defined in 9.2.8) with arguments availableLocales, requestedLocales,\n        //    and options.\n        return SupportedLocales(availableLocales, requestedLocales, options);\n    }, internals.NumberFormat)\n});\n\n/**\n * This named accessor property returns a function that formats a number\n * according to the effective locale and the formatting options of this\n * NumberFormat object.\n */\n/* 11.3.2 */defineProperty(Intl.NumberFormat.prototype, 'format', {\n    configurable: true,\n    get: GetFormatNumber\n});\n\nfunction GetFormatNumber() {\n        let internal = this !== null && typeof this === 'object' && getInternalProperties(this);\n\n        // Satisfy test 11.3_b\n        if (!internal || !internal['[[initializedNumberFormat]]'])\n            throw new TypeError('`this` value for format() is not an initialized Intl.NumberFormat object.');\n\n        // The value of the [[Get]] attribute is a function that takes the following\n        // steps:\n\n        // 1. If the [[boundFormat]] internal property of this NumberFormat object\n        //    is undefined, then:\n        if (internal['[[boundFormat]]'] === undefined) {\n            // a. Let F be a Function object, with internal properties set as\n            //    specified for built-in functions in ES5, 15, or successor, and the\n            //    length property set to 1, that takes the argument value and\n            //    performs the following steps:\n            let F = function (value) {\n                // i. If value is not provided, then let value be undefined.\n                // ii. Let x be ToNumber(value).\n                // iii. Return the result of calling the FormatNumber abstract\n                //      operation (defined below) with arguments this and x.\n                return FormatNumber(this, /* x = */Number(value));\n            };\n\n            // b. Let bind be the standard built-in function object defined in ES5,\n            //    15.3.4.5.\n            // c. Let bf be the result of calling the [[Call]] internal method of\n            //    bind with F as the this value and an argument list containing\n            //    the single item this.\n            let bf = fnBind.call(F, this);\n\n            // d. Set the [[boundFormat]] internal property of this NumberFormat\n            //    object to bf.\n            internal['[[boundFormat]]'] = bf;\n        }\n        // Return the value of the [[boundFormat]] internal property of this\n        // NumberFormat object.\n        return internal['[[boundFormat]]'];\n    }\n\nfunction formatToParts(value = undefined) {\n  let internal = this !== null && typeof this === 'object' && getInternalProperties(this);\n  if (!internal || !internal['[[initializedNumberFormat]]'])\n      throw new TypeError('`this` value for formatToParts() is not an initialized Intl.NumberFormat object.');\n\n  let x = Number(value);\n  return FormatNumberToParts(this, x);\n}\n\nObject.defineProperty(Intl.NumberFormat.prototype, 'formatToParts', {\n  configurable: true,\n  enumerable: false,\n  writable: true,\n  value: formatToParts\n});\n\n/*\n * @spec[tc39/ecma402/master/spec/numberformat.html]\n * @clause[sec-formatnumbertoparts]\n */\nfunction FormatNumberToParts(numberFormat, x) {\n    // 1. Let parts be ? PartitionNumberPattern(numberFormat, x).\n    let parts = PartitionNumberPattern(numberFormat, x);\n    // 2. Let result be ArrayCreate(0).\n    let result = [];\n    // 3. Let n be 0.\n    let n = 0;\n    // 4. For each part in parts, do:\n    for (let i = 0; parts.length > i; i++) {\n        let part = parts[i];\n        // a. Let O be ObjectCreate(%ObjectPrototype%).\n        let O = {};\n        // a. Perform ? CreateDataPropertyOrThrow(O, \"type\", part.[[type]]).\n        O.type = part['[[type]]'];\n        // a. Perform ? CreateDataPropertyOrThrow(O, \"value\", part.[[value]]).\n        O.value = part['[[value]]'];\n        // a. Perform ? CreateDataPropertyOrThrow(result, ? ToString(n), O).\n        result[n] = O;\n        // a. Increment n by 1.\n        n += 1;\n    }\n    // 5. Return result.\n    return result;\n}\n\n/*\n * @spec[tc39/ecma402/master/spec/numberformat.html]\n * @clause[sec-formatnumberstring]\n */\nfunction FormatNumberToString(numberFormat, x) {\n    let internal = getInternalProperties(numberFormat);\n    let result;\n\n    // 1. Assert: numberFormat.[[initializedIntlObject]] is true.\n\n    // 2. If the numberFormat.[[minimumSignificantDigits]] and numberFormat.[[maximumSignificantDigits]] are present, then\n    if (hop.call(internal, '[[minimumSignificantDigits]]') &&\n        hop.call(internal, '[[maximumSignificantDigits]]')) {\n        // a. Let result be ToRawPrecision(x, numberFormat.[[minimumSignificantDigits]], numberFormat.[[maximumSignificantDigits]]).\n        result = ToRawPrecision(x,\n          internal['[[minimumSignificantDigits]]'],\n          internal['[[maximumSignificantDigits]]']);\n    }\n    // 3. Else,\n    else {\n        // a. Let result be ToRawFixed(x, numberFormat.[[minimumIntegerDigits]], numberFormat.[[minimumFractionDigits]], numberFormat.[[maximumFractionDigits]]).\n        result = ToRawFixed(x,\n          internal['[[minimumIntegerDigits]]'],\n          internal['[[minimumFractionDigits]]'],\n          internal['[[maximumFractionDigits]]']);\n    }\n    // 4. Return result.\n    return result;\n}\n\n/*\n * @spec[tc39/ecma402/master/spec/numberformat.html]\n * @clause[sec-partitionnumberpattern]\n */\nfunction PartitionNumberPattern(numberFormat, x) {\n\n    let internal = getInternalProperties(numberFormat),\n        locale = internal['[[dataLocale]]'],\n        nums = internal['[[numberingSystem]]'],\n        data = internals.NumberFormat['[[localeData]]'][locale],\n        ild = data.symbols[nums] || data.symbols.latn,\n        pattern;\n\n    // 1. If x is not NaN and x < 0, then:\n    if (!isNaN(x) && x < 0) {\n        // a. Let x be -x.\n        x = -x;\n        // b. Let pattern be the value of numberFormat.[[negativePattern]].\n        pattern = internal['[[negativePattern]]'];\n    }\n    // 2. Else,\n    else {\n        // a. Let pattern be the value of numberFormat.[[positivePattern]].\n        pattern = internal['[[positivePattern]]'];\n    }\n    // 3. Let result be a new empty List.\n    let result = new List();\n    // 4. Let beginIndex be Call(%StringProto_indexOf%, pattern, \"{\", 0).\n    let beginIndex = pattern.indexOf('{', 0);\n    // 5. Let endIndex be 0.\n    let endIndex = 0;\n    // 6. Let nextIndex be 0.\n    let nextIndex = 0;\n    // 7. Let length be the number of code units in pattern.\n    let length = pattern.length;\n    // 8. Repeat while beginIndex is an integer index into pattern:\n    while (beginIndex > -1 && beginIndex < length) {\n        // a. Set endIndex to Call(%StringProto_indexOf%, pattern, \"}\", beginIndex)\n        endIndex = pattern.indexOf('}', beginIndex);\n        // b. If endIndex = -1, throw new Error exception.\n        if (endIndex === -1) throw new Error();\n        // c. If beginIndex is greater than nextIndex, then:\n        if (beginIndex > nextIndex) {\n            // i. Let literal be a substring of pattern from position nextIndex, inclusive, to position beginIndex, exclusive.\n            let literal = pattern.substring(nextIndex, beginIndex);\n            // ii. Add new part record { [[type]]: \"literal\", [[value]]: literal } as a new element of the list result.\n            arrPush.call(result, { '[[type]]': 'literal', '[[value]]': literal });\n        }\n        // d. Let p be the substring of pattern from position beginIndex, exclusive, to position endIndex, exclusive.\n        let p = pattern.substring(beginIndex + 1, endIndex);\n        // e. If p is equal \"number\", then:\n        if (p === \"number\") {\n            // i. If x is NaN,\n            if (isNaN(x)) {\n                // 1. Let n be an ILD String value indicating the NaN value.\n                let n = ild.nan;\n                // 2. Add new part record { [[type]]: \"nan\", [[value]]: n } as a new element of the list result.\n                arrPush.call(result, { '[[type]]': 'nan', '[[value]]': n });\n            }\n            // ii. Else if isFinite(x) is false,\n            else if (!isFinite(x)) {\n                // 1. Let n be an ILD String value indicating infinity.\n                let n = ild.infinity;\n                // 2. Add new part record { [[type]]: \"infinity\", [[value]]: n } as a new element of the list result.\n                arrPush.call(result, { '[[type]]': 'infinity', '[[value]]': n });\n            }\n            // iii. Else,\n            else {\n                // 1. If numberFormat.[[style]] is \"percent\", let x be 100 × x.\n                if (internal['[[style]]'] === 'percent') x *= 100;\n\n                // 2. Let n be FormatNumberToString(numberFormat, x).\n                let n = FormatNumberToString(numberFormat, x);\n\n                // 3. If the numberFormat.[[numberingSystem]] matches one of the values in the \"Numbering System\" column of Table 3 below, then\n                if (numSys[nums]) {\n                    // a. Let digits be an array whose 10 String valued elements are the UTF-16 string representations of the 10 digits specified in the \"Digits\" column of the matching row in Table 2.\n                    let digits = numSys[nums];\n                    // a. Replace each digit in n with the value of digits[digit].\n                    n = String(n).replace(/\\d/g, (digit) => {\n                        return digits[digit];\n                    });\n                }\n                // 4. Else use an implementation dependent algorithm to map n to the appropriate representation of n in the given numbering system.\n                else n = String(n); // ###TODO###\n\n                let integer;\n                let fraction;\n                // 5. Let decimalSepIndex be Call(%StringProto_indexOf%, n, \".\", 0).\n                let decimalSepIndex = n.indexOf('.', 0);\n                // 6. If decimalSepIndex > 0, then:\n                if (decimalSepIndex > 0) {\n                    // a. Let integer be the substring of n from position 0, inclusive, to position decimalSepIndex, exclusive.\n                    integer = n.substring(0, decimalSepIndex);\n                    // b. Let fraction be the substring of n from position decimalSepIndex, exclusive, to the end of n.\n                    fraction = n.substring(decimalSepIndex + 1, decimalSepIndex.length);\n                }\n                // 7. Else:\n                else {\n                    // a. Let integer be n.\n                    integer = n;\n                    // b. Let fraction be undefined.\n                    fraction = undefined;\n                }\n                // 8. If the value of the numberFormat.[[useGrouping]] is true,\n                if (internal['[[useGrouping]]'] === true) {\n                    // a. Let groupSepSymbol be the ILND String representing the grouping separator.\n                    let groupSepSymbol = ild.group;\n                    // b. Let groups be a List whose elements are, in left to right order, the substrings defined by ILND set of locations within the integer.\n                    let groups = [];\n                    // ----> implementation:\n                    // Primary group represents the group closest to the decimal\n                    let pgSize = data.patterns.primaryGroupSize || 3;\n                    // Secondary group is every other group\n                    let sgSize = data.patterns.secondaryGroupSize || pgSize;\n                    // Group only if necessary\n                    if (integer.length > pgSize) {\n                        // Index of the primary grouping separator\n                        let end = integer.length - pgSize;\n                        // Starting index for our loop\n                        let idx = end % sgSize;\n                        let start = integer.slice(0, idx);\n                        if (start.length) arrPush.call(groups, start);\n                        // Loop to separate into secondary grouping digits\n                        while (idx < end) {\n                            arrPush.call(groups, integer.slice(idx, idx + sgSize));\n                            idx += sgSize;\n                        }\n                        // Add the primary grouping digits\n                        arrPush.call(groups, integer.slice(end));\n                    } else {\n                        arrPush.call(groups, integer);\n                    }\n                    // c. Assert: The number of elements in groups List is greater than 0.\n                    if (groups.length === 0) throw new Error();\n                    // d. Repeat, while groups List is not empty:\n                    while (groups.length) {\n                        // i. Remove the first element from groups and let integerGroup be the value of that element.\n                        let integerGroup = arrShift.call(groups);\n                        // ii. Add new part record { [[type]]: \"integer\", [[value]]: integerGroup } as a new element of the list result.\n                        arrPush.call(result, { '[[type]]': 'integer', '[[value]]': integerGroup });\n                        // iii. If groups List is not empty, then:\n                        if (groups.length) {\n                            // 1. Add new part record { [[type]]: \"group\", [[value]]: groupSepSymbol } as a new element of the list result.\n                            arrPush.call(result, { '[[type]]': 'group', '[[value]]': groupSepSymbol });\n                        }\n                    }\n                }\n                // 9. Else,\n                else {\n                    // a. Add new part record { [[type]]: \"integer\", [[value]]: integer } as a new element of the list result.\n                    arrPush.call(result, { '[[type]]': 'integer', '[[value]]': integer });\n                }\n                // 10. If fraction is not undefined, then:\n                if (fraction !== undefined) {\n                    // a. Let decimalSepSymbol be the ILND String representing the decimal separator.\n                    let decimalSepSymbol = ild.decimal;\n                    // b. Add new part record { [[type]]: \"decimal\", [[value]]: decimalSepSymbol } as a new element of the list result.\n                    arrPush.call(result, { '[[type]]': 'decimal', '[[value]]': decimalSepSymbol });\n                    // c. Add new part record { [[type]]: \"fraction\", [[value]]: fraction } as a new element of the list result.\n                    arrPush.call(result, { '[[type]]': 'fraction', '[[value]]': fraction });\n                }\n            }\n        }\n        // f. Else if p is equal \"plusSign\", then:\n        else if (p === \"plusSign\") {\n            // i. Let plusSignSymbol be the ILND String representing the plus sign.\n            let plusSignSymbol = ild.plusSign;\n            // ii. Add new part record { [[type]]: \"plusSign\", [[value]]: plusSignSymbol } as a new element of the list result.\n            arrPush.call(result, { '[[type]]': 'plusSign', '[[value]]': plusSignSymbol });\n        }\n        // g. Else if p is equal \"minusSign\", then:\n        else if (p === \"minusSign\") {\n            // i. Let minusSignSymbol be the ILND String representing the minus sign.\n            let minusSignSymbol = ild.minusSign;\n            // ii. Add new part record { [[type]]: \"minusSign\", [[value]]: minusSignSymbol } as a new element of the list result.\n            arrPush.call(result, { '[[type]]': 'minusSign', '[[value]]': minusSignSymbol });\n        }\n        // h. Else if p is equal \"percentSign\" and numberFormat.[[style]] is \"percent\", then:\n        else if (p === \"percentSign\" && internal['[[style]]'] === \"percent\") {\n            // i. Let percentSignSymbol be the ILND String representing the percent sign.\n            let percentSignSymbol = ild.percentSign;\n            // ii. Add new part record { [[type]]: \"percentSign\", [[value]]: percentSignSymbol } as a new element of the list result.\n            arrPush.call(result, { '[[type]]': 'literal', '[[value]]': percentSignSymbol });\n        }\n        // i. Else if p is equal \"currency\" and numberFormat.[[style]] is \"currency\", then:\n        else if (p === \"currency\" && internal['[[style]]'] === \"currency\") {\n            // i. Let currency be the value of numberFormat.[[currency]].\n            let currency = internal['[[currency]]'];\n\n            let cd;\n\n            // iii. If numberFormat.[[currencyDisplay]] is \"code\", then\n            if (internal['[[currencyDisplay]]'] === \"code\") {\n                // 1. Let cd be currency.\n                cd = currency;\n            }\n            // iv. Else if numberFormat.[[currencyDisplay]] is \"symbol\", then\n            else if (internal['[[currencyDisplay]]'] === \"symbol\") {\n                // 1. Let cd be an ILD string representing currency in short form. If the implementation does not have such a representation of currency, use currency itself.\n                cd = data.currencies[currency] || currency;\n            }\n            // v. Else if numberFormat.[[currencyDisplay]] is \"name\", then\n            else if (internal['[[currencyDisplay]]'] === \"name\") {\n                // 1. Let cd be an ILD string representing currency in long form. If the implementation does not have such a representation of currency, then use currency itself.\n                cd = currency;\n            }\n            // vi. Add new part record { [[type]]: \"currency\", [[value]]: cd } as a new element of the list result.\n            arrPush.call(result, { '[[type]]': 'currency', '[[value]]': cd });\n        }\n        // j. Else,\n        else {\n          // i. Let literal be the substring of pattern from position beginIndex, inclusive, to position endIndex, inclusive.\n          let literal = pattern.substring(beginIndex, endIndex);\n          // ii. Add new part record { [[type]]: \"literal\", [[value]]: literal } as a new element of the list result.\n          arrPush.call(result, { '[[type]]': 'literal', '[[value]]': literal });\n        }\n        // k. Set nextIndex to endIndex + 1.\n        nextIndex = endIndex + 1;\n        // l. Set beginIndex to Call(%StringProto_indexOf%, pattern, \"{\", nextIndex)\n        beginIndex = pattern.indexOf('{', nextIndex);\n    }\n    // 9. If nextIndex is less than length, then:\n    if (nextIndex < length) {\n        // a. Let literal be the substring of pattern from position nextIndex, inclusive, to position length, exclusive.\n        let literal = pattern.substring(nextIndex, length);\n        // b. Add new part record { [[type]]: \"literal\", [[value]]: literal } as a new element of the list result.\n        arrPush.call(result, { '[[type]]': 'literal', '[[value]]': literal });\n    }\n    // 10. Return result.\n    return result;\n}\n\n/*\n * @spec[tc39/ecma402/master/spec/numberformat.html]\n * @clause[sec-formatnumber]\n */\nexport function FormatNumber(numberFormat, x) {\n    // 1. Let parts be ? PartitionNumberPattern(numberFormat, x).\n    let parts = PartitionNumberPattern(numberFormat, x);\n    // 2. Let result be an empty String.\n    let result = '';\n    // 3. For each part in parts, do:\n    for (let i = 0; parts.length > i; i++) {\n        let part = parts[i];\n        // a. Set result to a String value produced by concatenating result and part.[[value]].\n        result += part['[[value]]'];\n    }\n    // 4. Return result.\n    return result;\n}\n\n/**\n * When the ToRawPrecision abstract operation is called with arguments x (which\n * must be a finite non-negative number), minPrecision, and maxPrecision (both\n * must be integers between 1 and 21) the following steps are taken:\n */\nfunction ToRawPrecision (x, minPrecision, maxPrecision) {\n    // 1. Let p be maxPrecision.\n    let p = maxPrecision;\n\n    let m, e;\n\n    // 2. If x = 0, then\n    if (x === 0) {\n        // a. Let m be the String consisting of p occurrences of the character \"0\".\n        m = arrJoin.call(Array (p + 1), '0');\n        // b. Let e be 0.\n        e = 0;\n    }\n    // 3. Else\n    else {\n        // a. Let e and n be integers such that 10ᵖ⁻¹ ≤ n < 10ᵖ and for which the\n        //    exact mathematical value of n × 10ᵉ⁻ᵖ⁺¹ – x is as close to zero as\n        //    possible. If there are two such sets of e and n, pick the e and n for\n        //    which n × 10ᵉ⁻ᵖ⁺¹ is larger.\n        e = log10Floor(Math.abs(x));\n\n        // Easier to get to m from here\n        let f = Math.round(Math.exp((Math.abs(e - p + 1)) * Math.LN10));\n\n        // b. Let m be the String consisting of the digits of the decimal\n        //    representation of n (in order, with no leading zeroes)\n        m = String(Math.round(e - p + 1 < 0 ? x * f : x / f));\n    }\n\n    // 4. If e ≥ p, then\n    if (e >= p)\n        // a. Return the concatenation of m and e-p+1 occurrences of the character \"0\".\n        return m + arrJoin.call(Array(e-p+1 + 1), '0');\n\n    // 5. If e = p-1, then\n    else if (e === p - 1)\n        // a. Return m.\n        return m;\n\n    // 6. If e ≥ 0, then\n    else if (e >= 0)\n        // a. Let m be the concatenation of the first e+1 characters of m, the character\n        //    \".\", and the remaining p–(e+1) characters of m.\n        m = m.slice(0, e + 1) + '.' + m.slice(e + 1);\n\n    // 7. If e < 0, then\n    else if (e < 0)\n        // a. Let m be the concatenation of the String \"0.\", –(e+1) occurrences of the\n        //    character \"0\", and the string m.\n        m = '0.' + arrJoin.call(Array (-(e+1) + 1), '0') + m;\n\n    // 8. If m contains the character \".\", and maxPrecision > minPrecision, then\n    if (m.indexOf(\".\") >= 0 && maxPrecision > minPrecision) {\n        // a. Let cut be maxPrecision – minPrecision.\n        let cut = maxPrecision - minPrecision;\n\n        // b. Repeat while cut > 0 and the last character of m is \"0\":\n        while (cut > 0 && m.charAt(m.length-1) === '0') {\n            //  i. Remove the last character from m.\n            m = m.slice(0, -1);\n\n            //  ii. Decrease cut by 1.\n            cut--;\n        }\n\n        // c. If the last character of m is \".\", then\n        if (m.charAt(m.length-1) === '.')\n            //    i. Remove the last character from m.\n            m = m.slice(0, -1);\n    }\n    // 9. Return m.\n    return m;\n}\n\n/**\n * @spec[tc39/ecma402/master/spec/numberformat.html]\n * @clause[sec-torawfixed]\n * When the ToRawFixed abstract operation is called with arguments x (which must\n * be a finite non-negative number), minInteger (which must be an integer between\n * 1 and 21), minFraction, and maxFraction (which must be integers between 0 and\n * 20) the following steps are taken:\n */\nfunction ToRawFixed(x, minInteger, minFraction, maxFraction) {\n    // 1. Let f be maxFraction.\n    let f = maxFraction;\n    // 2. Let n be an integer for which the exact mathematical value of n ÷ 10f – x is as close to zero as possible. If there are two such n, pick the larger n.\n    let n = Math.pow(10, f) * x; // diverging...\n    // 3. If n = 0, let m be the String \"0\". Otherwise, let m be the String consisting of the digits of the decimal representation of n (in order, with no leading zeroes).\n    let m = (n === 0 ? \"0\" : n.toFixed(0)); // divering...\n\n    {\n        // this diversion is needed to take into consideration big numbers, e.g.:\n        // 1.2344501e+37 -> 12344501000000000000000000000000000000\n        let idx;\n        let exp = (idx = m.indexOf('e')) > -1 ? m.slice(idx + 1) : 0;\n        if (exp) {\n            m = m.slice(0, idx).replace('.', '');\n            m += arrJoin.call(Array(exp - (m.length - 1) + 1), '0');\n        }\n    }\n\n    let int;\n    // 4. If f ≠ 0, then\n    if (f !== 0) {\n        // a. Let k be the number of characters in m.\n        let k = m.length;\n        // a. If k ≤ f, then\n        if (k <= f) {\n            // i. Let z be the String consisting of f+1–k occurrences of the character \"0\".\n            let z = arrJoin.call(Array(f + 1 - k + 1), '0');\n            // ii. Let m be the concatenation of Strings z and m.\n            m = z + m;\n            // iii. Let k be f+1.\n            k = f + 1;\n        }\n        // a. Let a be the first k–f characters of m, and let b be the remaining f characters of m.\n        let a = m.substring(0, k - f), b = m.substring(k - f, m.length);\n        // a. Let m be the concatenation of the three Strings a, \".\", and b.\n        m = a + \".\" + b;\n        // a. Let int be the number of characters in a.\n        int = a.length;\n    }\n    // 5. Else, let int be the number of characters in m.\n    else int = m.length;\n    // 6. Let cut be maxFraction – minFraction.\n    let cut = maxFraction - minFraction;\n    // 7. Repeat while cut > 0 and the last character of m is \"0\":\n    while (cut > 0 && m.slice(-1) === \"0\") {\n        // a. Remove the last character from m.\n        m = m.slice(0, -1);\n        // a. Decrease cut by 1.\n        cut--;\n    }\n    // 8. If the last character of m is \".\", then\n    if (m.slice(-1) === \".\") {\n        // a. Remove the last character from m.\n        m = m.slice(0, -1);\n    }\n    // 9. If int < minInteger, then\n    if (int < minInteger) {\n        // a. Let z be the String consisting of minInteger–int occurrences of the character \"0\".\n        let z = arrJoin.call(Array(minInteger - int + 1), '0');\n        // a. Let m be the concatenation of Strings z and m.\n        m = z + m;\n    }\n    // 10. Return m.\n    return m;\n}\n\n// Sect 11.3.2 Table 2, Numbering systems\n// ======================================\nlet numSys = {\n    arab: ['\\u0660', '\\u0661', '\\u0662', '\\u0663', '\\u0664', '\\u0665', '\\u0666', '\\u0667', '\\u0668', '\\u0669'],\n    arabext: ['\\u06F0', '\\u06F1', '\\u06F2', '\\u06F3', '\\u06F4', '\\u06F5', '\\u06F6', '\\u06F7', '\\u06F8', '\\u06F9'],\n    bali: ['\\u1B50', '\\u1B51', '\\u1B52', '\\u1B53', '\\u1B54', '\\u1B55', '\\u1B56', '\\u1B57', '\\u1B58', '\\u1B59'],\n    beng: ['\\u09E6', '\\u09E7', '\\u09E8', '\\u09E9', '\\u09EA', '\\u09EB', '\\u09EC', '\\u09ED', '\\u09EE', '\\u09EF'],\n    deva: ['\\u0966', '\\u0967', '\\u0968', '\\u0969', '\\u096A', '\\u096B', '\\u096C', '\\u096D', '\\u096E', '\\u096F'],\n    fullwide: ['\\uFF10', '\\uFF11', '\\uFF12', '\\uFF13', '\\uFF14', '\\uFF15', '\\uFF16', '\\uFF17', '\\uFF18', '\\uFF19'],\n    gujr: ['\\u0AE6', '\\u0AE7', '\\u0AE8', '\\u0AE9', '\\u0AEA', '\\u0AEB', '\\u0AEC', '\\u0AED', '\\u0AEE', '\\u0AEF'],\n    guru: ['\\u0A66', '\\u0A67', '\\u0A68', '\\u0A69', '\\u0A6A', '\\u0A6B', '\\u0A6C', '\\u0A6D', '\\u0A6E', '\\u0A6F'],\n    hanidec: ['\\u3007', '\\u4E00', '\\u4E8C', '\\u4E09', '\\u56DB', '\\u4E94', '\\u516D', '\\u4E03', '\\u516B', '\\u4E5D'],\n    khmr: ['\\u17E0', '\\u17E1', '\\u17E2', '\\u17E3', '\\u17E4', '\\u17E5', '\\u17E6', '\\u17E7', '\\u17E8', '\\u17E9'],\n    knda: ['\\u0CE6', '\\u0CE7', '\\u0CE8', '\\u0CE9', '\\u0CEA', '\\u0CEB', '\\u0CEC', '\\u0CED', '\\u0CEE', '\\u0CEF'],\n    laoo: ['\\u0ED0', '\\u0ED1', '\\u0ED2', '\\u0ED3', '\\u0ED4', '\\u0ED5', '\\u0ED6', '\\u0ED7', '\\u0ED8', '\\u0ED9'],\n    latn: ['\\u0030', '\\u0031', '\\u0032', '\\u0033', '\\u0034', '\\u0035', '\\u0036', '\\u0037', '\\u0038', '\\u0039'],\n    limb: ['\\u1946', '\\u1947', '\\u1948', '\\u1949', '\\u194A', '\\u194B', '\\u194C', '\\u194D', '\\u194E', '\\u194F'],\n    mlym: ['\\u0D66', '\\u0D67', '\\u0D68', '\\u0D69', '\\u0D6A', '\\u0D6B', '\\u0D6C', '\\u0D6D', '\\u0D6E', '\\u0D6F'],\n    mong: ['\\u1810', '\\u1811', '\\u1812', '\\u1813', '\\u1814', '\\u1815', '\\u1816', '\\u1817', '\\u1818', '\\u1819'],\n    mymr: ['\\u1040', '\\u1041', '\\u1042', '\\u1043', '\\u1044', '\\u1045', '\\u1046', '\\u1047', '\\u1048', '\\u1049'],\n    orya: ['\\u0B66', '\\u0B67', '\\u0B68', '\\u0B69', '\\u0B6A', '\\u0B6B', '\\u0B6C', '\\u0B6D', '\\u0B6E', '\\u0B6F'],\n    tamldec: ['\\u0BE6', '\\u0BE7', '\\u0BE8', '\\u0BE9', '\\u0BEA', '\\u0BEB', '\\u0BEC', '\\u0BED', '\\u0BEE', '\\u0BEF'],\n    telu: ['\\u0C66', '\\u0C67', '\\u0C68', '\\u0C69', '\\u0C6A', '\\u0C6B', '\\u0C6C', '\\u0C6D', '\\u0C6E', '\\u0C6F'],\n    thai: ['\\u0E50', '\\u0E51', '\\u0E52', '\\u0E53', '\\u0E54', '\\u0E55', '\\u0E56', '\\u0E57', '\\u0E58', '\\u0E59'],\n    tibt: ['\\u0F20', '\\u0F21', '\\u0F22', '\\u0F23', '\\u0F24', '\\u0F25', '\\u0F26', '\\u0F27', '\\u0F28', '\\u0F29']\n};\n\n/**\n * This function provides access to the locale and formatting options computed\n * during initialization of the object.\n *\n * The function returns a new object whose properties and attributes are set as\n * if constructed by an object literal assigning to each of the following\n * properties the value of the corresponding internal property of this\n * NumberFormat object (see 11.4): locale, numberingSystem, style, currency,\n * currencyDisplay, minimumIntegerDigits, minimumFractionDigits,\n * maximumFractionDigits, minimumSignificantDigits, maximumSignificantDigits, and\n * useGrouping. Properties whose corresponding internal properties are not present\n * are not assigned.\n */\n/* 11.3.3 */defineProperty(Intl.NumberFormat.prototype, 'resolvedOptions', {\n    configurable: true,\n    writable: true,\n    value: function () {\n        let prop,\n            descs = new Record(),\n            props = [\n                'locale', 'numberingSystem', 'style', 'currency', 'currencyDisplay',\n                'minimumIntegerDigits', 'minimumFractionDigits', 'maximumFractionDigits',\n                'minimumSignificantDigits', 'maximumSignificantDigits', 'useGrouping'\n            ],\n            internal = this !== null && typeof this === 'object' && getInternalProperties(this);\n\n        // Satisfy test 11.3_b\n        if (!internal || !internal['[[initializedNumberFormat]]'])\n            throw new TypeError('`this` value for resolvedOptions() is not an initialized Intl.NumberFormat object.');\n\n        for (let i = 0, max = props.length; i < max; i++) {\n            if (hop.call(internal, prop = '[['+ props[i] +']]'))\n                descs[props[i]] = { value: internal[prop], writable: true, configurable: true, enumerable: true };\n        }\n\n        return objCreate({}, descs);\n    }\n});\n","/* jslint esnext: true */\n\n// Match these datetime components in a CLDR pattern, except those in single quotes\nlet expDTComponents = /(?:[Eec]{1,6}|G{1,5}|[Qq]{1,5}|(?:[yYur]+|U{1,5})|[ML]{1,5}|d{1,2}|D{1,3}|F{1}|[abB]{1,5}|[hkHK]{1,2}|w{1,2}|W{1}|m{1,2}|s{1,2}|[zZOvVxX]{1,4})(?=([^']*'[^']*')*[^']*$)/g;\n// trim patterns after transformations\nlet expPatternTrimmer = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g;\n// Skip over patterns with these datetime components because we don't have data\n// to back them up:\n// timezone, weekday, amoung others\nlet unwantedDTCs = /[rqQASjJgwWIQq]/; // xXVO were removed from this list in favor of computing matches with timeZoneName values but printing as empty string\n\nlet dtKeys = [\"era\", \"year\", \"month\", \"day\", \"weekday\", \"quarter\"];\nlet tmKeys = [\"hour\", \"minute\", \"second\", \"hour12\", \"timeZoneName\"];\n\nfunction isDateFormatOnly(obj) {\n    for (let i = 0; i < tmKeys.length; i += 1) {\n        if (obj.hasOwnProperty(tmKeys[i])) {\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction isTimeFormatOnly(obj) {\n    for (let i = 0; i < dtKeys.length; i += 1) {\n        if (obj.hasOwnProperty(dtKeys[i])) {\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction joinDateAndTimeFormats(dateFormatObj, timeFormatObj) {\n    let o = { _: {} };\n    for (let i = 0; i < dtKeys.length; i += 1) {\n        if (dateFormatObj[dtKeys[i]]) {\n            o[dtKeys[i]] = dateFormatObj[dtKeys[i]];\n        }\n        if (dateFormatObj._[dtKeys[i]]) {\n            o._[dtKeys[i]] = dateFormatObj._[dtKeys[i]];\n        }\n    }\n    for (let j = 0; j < tmKeys.length; j += 1) {\n        if (timeFormatObj[tmKeys[j]]) {\n            o[tmKeys[j]] = timeFormatObj[tmKeys[j]];\n        }\n        if (timeFormatObj._[tmKeys[j]]) {\n            o._[tmKeys[j]] = timeFormatObj._[tmKeys[j]];\n        }\n    }\n    return o;\n}\n\nfunction computeFinalPatterns(formatObj) {\n    // From http://www.unicode.org/reports/tr35/tr35-dates.html#Date_Format_Patterns:\n    //  'In patterns, two single quotes represents a literal single quote, either\n    //   inside or outside single quotes. Text within single quotes is not\n    //   interpreted in any way (except for two adjacent single quotes).'\n    formatObj.pattern12 = formatObj.extendedPattern.replace(/'([^']*)'/g, ($0, literal) => {\n        return literal ? literal : \"'\";\n    });\n\n    // pattern 12 is always the default. we can produce the 24 by removing {ampm}\n    formatObj.pattern = formatObj.pattern12.replace('{ampm}', '').replace(expPatternTrimmer, '');\n    return formatObj;\n}\n\nfunction expDTComponentsMeta($0, formatObj) {\n    switch ($0.charAt(0)) {\n        // --- Era\n        case 'G':\n            formatObj.era = [ 'short', 'short', 'short', 'long', 'narrow' ][$0.length-1];\n            return '{era}';\n\n        // --- Year\n        case 'y':\n        case 'Y':\n        case 'u':\n        case 'U':\n        case 'r':\n            formatObj.year = $0.length === 2 ? '2-digit' : 'numeric';\n            return '{year}';\n\n        // --- Quarter (not supported in this polyfill)\n        case 'Q':\n        case 'q':\n            formatObj.quarter = [ 'numeric', '2-digit', 'short', 'long', 'narrow' ][$0.length-1];\n            return '{quarter}';\n\n        // --- Month\n        case 'M':\n        case 'L':\n            formatObj.month = [ 'numeric', '2-digit', 'short', 'long', 'narrow' ][$0.length-1];\n            return '{month}';\n\n        // --- Week (not supported in this polyfill)\n        case 'w':\n            // week of the year\n            formatObj.week = $0.length === 2 ? '2-digit' : 'numeric';\n            return '{weekday}';\n        case 'W':\n            // week of the month\n            formatObj.week = 'numeric';\n            return '{weekday}';\n\n        // --- Day\n        case 'd':\n            // day of the month\n            formatObj.day = $0.length === 2 ? '2-digit' : 'numeric';\n            return '{day}';\n        case 'D': // day of the year\n        case 'F': // day of the week\n        case 'g':\n            // 1..n: Modified Julian day\n            formatObj.day = 'numeric';\n            return '{day}';\n\n        // --- Week Day\n        case 'E':\n            // day of the week\n            formatObj.weekday = [ 'short', 'short', 'short', 'long', 'narrow', 'short' ][$0.length-1];\n            return '{weekday}';\n        case 'e':\n            // local day of the week\n            formatObj.weekday = [ 'numeric', '2-digit', 'short', 'long', 'narrow', 'short' ][$0.length-1];\n            return '{weekday}';\n        case 'c':\n            // stand alone local day of the week\n            formatObj.weekday = [ 'numeric', undefined, 'short', 'long', 'narrow', 'short' ][$0.length-1];\n            return '{weekday}';\n\n        // --- Period\n        case 'a': // AM, PM\n        case 'b': // am, pm, noon, midnight\n        case 'B': // flexible day periods\n            formatObj.hour12 = true;\n            return '{ampm}';\n\n        // --- Hour\n        case 'h':\n        case 'H':\n            formatObj.hour = $0.length === 2 ? '2-digit' : 'numeric';\n            return '{hour}';\n        case 'k':\n        case 'K':\n            formatObj.hour12 = true; // 12-hour-cycle time formats (using h or K)\n            formatObj.hour = $0.length === 2 ? '2-digit' : 'numeric';\n            return '{hour}';\n\n        // --- Minute\n        case 'm':\n            formatObj.minute = $0.length === 2 ? '2-digit' : 'numeric';\n            return '{minute}';\n\n        // --- Second\n        case 's':\n            formatObj.second = $0.length === 2 ? '2-digit' : 'numeric';\n            return '{second}';\n        case 'S':\n        case 'A':\n            formatObj.second = 'numeric';\n            return '{second}';\n\n        // --- Timezone\n        case 'z': // 1..3, 4: specific non-location format\n        case 'Z': // 1..3, 4, 5: The ISO8601 varios formats\n        case 'O': // 1, 4: miliseconds in day short, long\n        case 'v': // 1, 4: generic non-location format\n        case 'V': // 1, 2, 3, 4: time zone ID or city\n        case 'X': // 1, 2, 3, 4: The ISO8601 varios formats\n        case 'x': // 1, 2, 3, 4: The ISO8601 varios formats\n            // this polyfill only supports much, for now, we are just doing something dummy\n            formatObj.timeZoneName = $0.length < 4 ? 'short' : 'long';\n            return '{timeZoneName}';\n    }\n}\n\n\n/**\n * Converts the CLDR availableFormats into the objects and patterns required by\n * the ECMAScript Internationalization API specification.\n */\nexport function createDateTimeFormat(skeleton, pattern) {\n    // we ignore certain patterns that are unsupported to avoid this expensive op.\n    if (unwantedDTCs.test(pattern))\n        return undefined;\n\n    let formatObj = {\n        originalPattern: pattern,\n        _: {}\n    };\n\n    // Replace the pattern string with the one required by the specification, whilst\n    // at the same time evaluating it for the subsets and formats\n    formatObj.extendedPattern = pattern.replace(expDTComponents, ($0) => {\n        // See which symbol we're dealing with\n        return expDTComponentsMeta($0, formatObj._);\n    });\n\n    // Match the skeleton string with the one required by the specification\n    // this implementation is based on the Date Field Symbol Table:\n    // http://unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n    // Note: we are adding extra data to the formatObject even though this polyfill\n    //       might not support it.\n    skeleton.replace(expDTComponents, ($0) => {\n        // See which symbol we're dealing with\n        return expDTComponentsMeta($0, formatObj);\n    });\n\n    return computeFinalPatterns(formatObj);\n}\n\n/**\n * Processes DateTime formats from CLDR to an easier-to-parse format.\n * the result of this operation should be cached the first time a particular\n * calendar is analyzed.\n *\n * The specification requires we support at least the following subsets of\n * date/time components:\n *\n *   - 'weekday', 'year', 'month', 'day', 'hour', 'minute', 'second'\n *   - 'weekday', 'year', 'month', 'day'\n *   - 'year', 'month', 'day'\n *   - 'year', 'month'\n *   - 'month', 'day'\n *   - 'hour', 'minute', 'second'\n *   - 'hour', 'minute'\n *\n * We need to cherry pick at least these subsets from the CLDR data and convert\n * them into the pattern objects used in the ECMA-402 API.\n */\nexport function createDateTimeFormats(formats) {\n    let availableFormats = formats.availableFormats;\n    let timeFormats = formats.timeFormats;\n    let dateFormats = formats.dateFormats;\n    let result = [];\n    let skeleton, pattern, computed, i, j;\n    let timeRelatedFormats = [];\n    let dateRelatedFormats = [];\n\n    // Map available (custom) formats into a pattern for createDateTimeFormats\n    for (skeleton in availableFormats) {\n        if (availableFormats.hasOwnProperty(skeleton)) {\n            pattern = availableFormats[skeleton];\n            computed = createDateTimeFormat(skeleton, pattern);\n            if (computed) {\n                result.push(computed);\n                // in some cases, the format is only displaying date specific props\n                // or time specific props, in which case we need to also produce the\n                // combined formats.\n                if (isDateFormatOnly(computed)) {\n                    dateRelatedFormats.push(computed);\n                } else if (isTimeFormatOnly(computed)) {\n                    timeRelatedFormats.push(computed);\n                }\n            }\n        }\n    }\n\n    // Map time formats into a pattern for createDateTimeFormats\n    for (skeleton in timeFormats) {\n        if (timeFormats.hasOwnProperty(skeleton)) {\n            pattern = timeFormats[skeleton];\n            computed = createDateTimeFormat(skeleton, pattern);\n            if (computed) {\n                result.push(computed);\n                timeRelatedFormats.push(computed);\n            }\n        }\n    }\n\n    // Map date formats into a pattern for createDateTimeFormats\n    for (skeleton in dateFormats) {\n        if (dateFormats.hasOwnProperty(skeleton)) {\n            pattern = dateFormats[skeleton];\n            computed = createDateTimeFormat(skeleton, pattern);\n            if (computed) {\n                result.push(computed);\n                dateRelatedFormats.push(computed);\n            }\n        }\n    }\n\n    // combine custom time and custom date formats when they are orthogonals to complete the\n    // formats supported by CLDR.\n    // This Algo is based on section \"Missing Skeleton Fields\" from:\n    // http://unicode.org/reports/tr35/tr35-dates.html#availableFormats_appendItems\n    for (i = 0; i < timeRelatedFormats.length; i += 1) {\n        for (j = 0; j < dateRelatedFormats.length; j += 1) {\n            if (dateRelatedFormats[j].month === 'long') {\n                pattern = dateRelatedFormats[j].weekday ? formats.full : formats.long;\n            } else if (dateRelatedFormats[j].month === 'short') {\n                pattern = formats.medium;\n            } else {\n                pattern = formats.short;\n            }\n            computed = joinDateAndTimeFormats(dateRelatedFormats[j], timeRelatedFormats[i]);\n            computed.originalPattern = pattern;\n            computed.extendedPattern = pattern\n                .replace('{0}', timeRelatedFormats[i].extendedPattern)\n                .replace('{1}', dateRelatedFormats[j].extendedPattern)\n                .replace(/^[,\\s]+|[,\\s]+$/gi, '');\n            result.push(computeFinalPatterns(computed));\n        }\n    }\n\n    return result;\n}\n\n// this represents the exceptions of the rule that are not covered by CLDR availableFormats\n// for single property configurations, they play no role when using multiple properties, and\n// those that are not in this table, are not exceptions or are not covered by the data we\n// provide.\nconst validSyntheticProps = {\n    second: {\n        numeric:   's',\n        '2-digit': 'ss'\n    },\n    minute: {\n        numeric:   'm',\n        '2-digit': 'mm'\n    },\n    year: {\n        numeric:   'y',\n        '2-digit': 'yy'\n    },\n    day: {\n        numeric:   'd',\n        '2-digit': 'dd'\n    },\n    month: {\n        numeric:   'L',\n        '2-digit': 'LL',\n        narrow:    'LLLLL',\n        short:     'LLL',\n        long:      'LLLL'\n    },\n    weekday: {\n        narrow:  'ccccc',\n        short:   'ccc',\n        long:    'cccc'\n    }\n};\n\nexport function generateSyntheticFormat(propName, propValue) {\n    if (validSyntheticProps[propName] && validSyntheticProps[propName][propValue]) {\n        return {\n            originalPattern: validSyntheticProps[propName][propValue],\n            _: {\n                [propName]: propValue\n            },\n            extendedPattern: `{${propName}}`,\n            [propName]: propValue,\n            pattern12: `{${propName}}`,\n            pattern: `{${propName}}`\n        };\n    }\n}\n","// 12.1 The Intl.DateTimeFormat constructor\n// ==================================\n\nimport {\n    toLatinUpperCase\n} from './6.locales-currencies-tz.js';\n\nimport {\n    Intl\n} from \"./8.intl.js\";\n\nimport {\n    CanonicalizeLocaleList,\n    ResolveLocale,\n    GetOption,\n    SupportedLocales\n} from \"./9.negotiation.js\";\n\nimport {\n    FormatNumber\n} from \"./11.numberformat.js\";\n\nimport {\n    generateSyntheticFormat,\n    createDateTimeFormats\n} from \"./cldr\";\n\nimport {\n    internals,\n    es3,\n    fnBind,\n    defineProperty,\n    toObject,\n    getInternalProperties,\n    createRegExpRestore,\n    secret,\n    Record,\n    List,\n    hop,\n    objCreate,\n    toNumber,\n    arrPush,\n    arrIndexOf\n} from './util.js';\n\n// An object map of date component keys, saves using a regex later\nconst dateWidths = objCreate(null, { narrow:{}, short:{}, long:{} });\n\n/**\n * Returns a string for a date component, resolved using multiple inheritance as specified\n * as specified in the Unicode Technical Standard 35.\n */\nfunction resolveDateString(data, ca, component, width, key) {\n    // From http://www.unicode.org/reports/tr35/tr35.html#Multiple_Inheritance:\n    // 'In clearly specified instances, resources may inherit from within the same locale.\n    //  For example, ... the Buddhist calendar inherits from the Gregorian calendar.'\n    let obj = data[ca] && data[ca][component]\n                ? data[ca][component]\n                : data.gregory[component],\n\n        // \"sideways\" inheritance resolves strings when a key doesn't exist\n        alts = {\n            narrow: ['short', 'long'],\n            short:  ['long', 'narrow'],\n            long:   ['short', 'narrow']\n        },\n\n        //\n        resolved = hop.call(obj, width)\n                  ? obj[width]\n                  : hop.call(obj, alts[width][0])\n                      ? obj[alts[width][0]]\n                      : obj[alts[width][1]];\n\n    // `key` wouldn't be specified for components 'dayPeriods'\n    return key !== null ? resolved[key] : resolved;\n}\n\n// Define the DateTimeFormat constructor internally so it cannot be tainted\nexport function DateTimeFormatConstructor () {\n    let locales = arguments[0];\n    let options = arguments[1];\n\n    if (!this || this === Intl) {\n        return new Intl.DateTimeFormat(locales, options);\n    }\n    return InitializeDateTimeFormat(toObject(this), locales, options);\n}\n\ndefineProperty(Intl, 'DateTimeFormat', {\n    configurable: true,\n    writable: true,\n    value: DateTimeFormatConstructor\n});\n\n// Must explicitly set prototypes as unwritable\ndefineProperty(DateTimeFormatConstructor, 'prototype', {\n    writable: false\n});\n\n/**\n * The abstract operation InitializeDateTimeFormat accepts the arguments dateTimeFormat\n * (which must be an object), locales, and options. It initializes dateTimeFormat as a\n * DateTimeFormat object.\n */\nexport function/* 12.1.1.1 */InitializeDateTimeFormat (dateTimeFormat, locales, options) {\n    // This will be a internal properties object if we're not already initialized\n    let internal = getInternalProperties(dateTimeFormat);\n\n    // Create an object whose props can be used to restore the values of RegExp props\n    let regexpRestore = createRegExpRestore();\n\n    // 1. If dateTimeFormat has an [[initializedIntlObject]] internal property with\n    //    value true, throw a TypeError exception.\n    if (internal['[[initializedIntlObject]]'] === true)\n        throw new TypeError('`this` object has already been initialized as an Intl object');\n\n    // Need this to access the `internal` object\n    defineProperty(dateTimeFormat, '__getInternalProperties', {\n        value: function () {\n            // NOTE: Non-standard, for internal use only\n            if (arguments[0] === secret)\n                return internal;\n        }\n    });\n\n    // 2. Set the [[initializedIntlObject]] internal property of numberFormat to true.\n    internal['[[initializedIntlObject]]'] = true;\n\n    // 3. Let requestedLocales be the result of calling the CanonicalizeLocaleList\n    //    abstract operation (defined in 9.2.1) with argument locales.\n    let requestedLocales = CanonicalizeLocaleList(locales);\n\n    // 4. Let options be the result of calling the ToDateTimeOptions abstract\n    //    operation (defined below) with arguments options, \"any\", and \"date\".\n    options = ToDateTimeOptions(options, 'any', 'date');\n\n    // 5. Let opt be a new Record.\n    let opt = new Record();\n\n    // 6. Let matcher be the result of calling the GetOption abstract operation\n    //    (defined in 9.2.9) with arguments options, \"localeMatcher\", \"string\", a List\n    //    containing the two String values \"lookup\" and \"best fit\", and \"best fit\".\n    let matcher = GetOption(options, 'localeMatcher', 'string', new List('lookup', 'best fit'), 'best fit');\n\n    // 7. Set opt.[[localeMatcher]] to matcher.\n    opt['[[localeMatcher]]'] = matcher;\n\n    // 8. Let DateTimeFormat be the standard built-in object that is the initial\n    //    value of Intl.DateTimeFormat.\n    let DateTimeFormat = internals.DateTimeFormat; // This is what we *really* need\n\n    // 9. Let localeData be the value of the [[localeData]] internal property of\n    //    DateTimeFormat.\n    let localeData = DateTimeFormat['[[localeData]]'];\n\n    // 10. Let r be the result of calling the ResolveLocale abstract operation\n    //     (defined in 9.2.5) with the [[availableLocales]] internal property of\n    //      DateTimeFormat, requestedLocales, opt, the [[relevantExtensionKeys]]\n    //      internal property of DateTimeFormat, and localeData.\n    let r = ResolveLocale(DateTimeFormat['[[availableLocales]]'], requestedLocales,\n                opt, DateTimeFormat['[[relevantExtensionKeys]]'], localeData);\n\n    // 11. Set the [[locale]] internal property of dateTimeFormat to the value of\n    //     r.[[locale]].\n    internal['[[locale]]'] = r['[[locale]]'];\n\n    // 12. Set the [[calendar]] internal property of dateTimeFormat to the value of\n    //     r.[[ca]].\n    internal['[[calendar]]'] = r['[[ca]]'];\n\n    // 13. Set the [[numberingSystem]] internal property of dateTimeFormat to the value of\n    //     r.[[nu]].\n    internal['[[numberingSystem]]'] = r['[[nu]]'];\n\n    // The specification doesn't tell us to do this, but it's helpful later on\n    internal['[[dataLocale]]'] = r['[[dataLocale]]'];\n\n    // 14. Let dataLocale be the value of r.[[dataLocale]].\n    let dataLocale = r['[[dataLocale]]'];\n\n    // 15. Let tz be the result of calling the [[Get]] internal method of options with\n    //     argument \"timeZone\".\n    let tz = options.timeZone;\n\n    // 16. If tz is not undefined, then\n    if (tz !== undefined) {\n        // a. Let tz be ToString(tz).\n        // b. Convert tz to upper case as described in 6.1.\n        //    NOTE: If an implementation accepts additional time zone values, as permitted\n        //          under certain conditions by the Conformance clause, different casing\n        //          rules apply.\n        tz = toLatinUpperCase(tz);\n\n        // c. If tz is not \"UTC\", then throw a RangeError exception.\n        // ###TODO: accept more time zones###\n        if (tz !== 'UTC')\n            throw new RangeError('timeZone is not supported.');\n    }\n\n    // 17. Set the [[timeZone]] internal property of dateTimeFormat to tz.\n    internal['[[timeZone]]'] = tz;\n\n    // 18. Let opt be a new Record.\n    opt = new Record();\n\n    // 19. For each row of Table 3, except the header row, do:\n    for (let prop in dateTimeComponents) {\n        if (!hop.call(dateTimeComponents, prop))\n            continue;\n\n        // 20. Let prop be the name given in the Property column of the row.\n        // 21. Let value be the result of calling the GetOption abstract operation,\n        //     passing as argument options, the name given in the Property column of the\n        //     row, \"string\", a List containing the strings given in the Values column of\n        //     the row, and undefined.\n        let value = GetOption(options, prop, 'string', dateTimeComponents[prop]);\n\n        // 22. Set opt.[[<prop>]] to value.\n        opt['[['+prop+']]'] = value;\n    }\n\n    // Assigned a value below\n    let bestFormat;\n\n    // 23. Let dataLocaleData be the result of calling the [[Get]] internal method of\n    //     localeData with argument dataLocale.\n    let dataLocaleData = localeData[dataLocale];\n\n    // 24. Let formats be the result of calling the [[Get]] internal method of\n    //     dataLocaleData with argument \"formats\".\n    //     Note: we process the CLDR formats into the spec'd structure\n    let formats = ToDateTimeFormats(dataLocaleData.formats);\n\n    // 25. Let matcher be the result of calling the GetOption abstract operation with\n    //     arguments options, \"formatMatcher\", \"string\", a List containing the two String\n    //     values \"basic\" and \"best fit\", and \"best fit\".\n    matcher = GetOption(options, 'formatMatcher', 'string', new List('basic', 'best fit'), 'best fit');\n\n    // Optimization: caching the processed formats as a one time operation by\n    // replacing the initial structure from localeData\n    dataLocaleData.formats = formats;\n\n    // 26. If matcher is \"basic\", then\n    if (matcher === 'basic') {\n        // 27. Let bestFormat be the result of calling the BasicFormatMatcher abstract\n        //     operation (defined below) with opt and formats.\n        bestFormat = BasicFormatMatcher(opt, formats);\n\n    // 28. Else\n    } else {\n        {\n            // diverging\n            let hr12 = GetOption(options, 'hour12', 'boolean'/*, undefined, undefined*/);\n            opt.hour12 = hr12 === undefined ? dataLocaleData.hour12 : hr12;\n        }\n        // 29. Let bestFormat be the result of calling the BestFitFormatMatcher\n        //     abstract operation (defined below) with opt and formats.\n        bestFormat = BestFitFormatMatcher(opt, formats);\n    }\n\n    // 30. For each row in Table 3, except the header row, do\n    for (let prop in dateTimeComponents) {\n        if (!hop.call(dateTimeComponents, prop))\n            continue;\n\n        // a. Let prop be the name given in the Property column of the row.\n        // b. Let pDesc be the result of calling the [[GetOwnProperty]] internal method of\n        //    bestFormat with argument prop.\n        // c. If pDesc is not undefined, then\n        if (hop.call(bestFormat, prop)) {\n            // i. Let p be the result of calling the [[Get]] internal method of bestFormat\n            //    with argument prop.\n            let p = bestFormat[prop];\n            {\n                // diverging\n                p = bestFormat._ && hop.call(bestFormat._, prop) ? bestFormat._[prop] : p;\n            }\n\n            // ii. Set the [[<prop>]] internal property of dateTimeFormat to p.\n            internal['[['+prop+']]'] = p;\n        }\n    }\n\n    let pattern; // Assigned a value below\n\n    // 31. Let hr12 be the result of calling the GetOption abstract operation with\n    //     arguments options, \"hour12\", \"boolean\", undefined, and undefined.\n    let hr12 = GetOption(options, 'hour12', 'boolean'/*, undefined, undefined*/);\n\n    // 32. If dateTimeFormat has an internal property [[hour]], then\n    if (internal['[[hour]]']) {\n        // a. If hr12 is undefined, then let hr12 be the result of calling the [[Get]]\n        //    internal method of dataLocaleData with argument \"hour12\".\n        hr12 = hr12 === undefined ? dataLocaleData.hour12 : hr12;\n\n        // b. Set the [[hour12]] internal property of dateTimeFormat to hr12.\n        internal['[[hour12]]'] = hr12;\n\n        // c. If hr12 is true, then\n        if (hr12 === true) {\n            // i. Let hourNo0 be the result of calling the [[Get]] internal method of\n            //    dataLocaleData with argument \"hourNo0\".\n            let hourNo0 = dataLocaleData.hourNo0;\n\n            // ii. Set the [[hourNo0]] internal property of dateTimeFormat to hourNo0.\n            internal['[[hourNo0]]'] = hourNo0;\n\n            // iii. Let pattern be the result of calling the [[Get]] internal method of\n            //      bestFormat with argument \"pattern12\".\n            pattern = bestFormat.pattern12;\n        }\n\n        // d. Else\n        else\n            // i. Let pattern be the result of calling the [[Get]] internal method of\n            //    bestFormat with argument \"pattern\".\n            pattern = bestFormat.pattern;\n    }\n\n    // 33. Else\n    else\n        // a. Let pattern be the result of calling the [[Get]] internal method of\n        //    bestFormat with argument \"pattern\".\n        pattern = bestFormat.pattern;\n\n    // 34. Set the [[pattern]] internal property of dateTimeFormat to pattern.\n    internal['[[pattern]]'] = pattern;\n\n    // 35. Set the [[boundFormat]] internal property of dateTimeFormat to undefined.\n    internal['[[boundFormat]]'] = undefined;\n\n    // 36. Set the [[initializedDateTimeFormat]] internal property of dateTimeFormat to\n    //     true.\n    internal['[[initializedDateTimeFormat]]'] = true;\n\n    // In ES3, we need to pre-bind the format() function\n    if (es3)\n        dateTimeFormat.format = GetFormatDateTime.call(dateTimeFormat);\n\n    // Restore the RegExp properties\n    regexpRestore();\n\n    // Return the newly initialised object\n    return dateTimeFormat;\n}\n\n/**\n * Several DateTimeFormat algorithms use values from the following table, which provides\n * property names and allowable values for the components of date and time formats:\n */\nlet dateTimeComponents = {\n         weekday: [ \"narrow\", \"short\", \"long\" ],\n             era: [ \"narrow\", \"short\", \"long\" ],\n            year: [ \"2-digit\", \"numeric\" ],\n           month: [ \"2-digit\", \"numeric\", \"narrow\", \"short\", \"long\" ],\n             day: [ \"2-digit\", \"numeric\" ],\n            hour: [ \"2-digit\", \"numeric\" ],\n          minute: [ \"2-digit\", \"numeric\" ],\n          second: [ \"2-digit\", \"numeric\" ],\n    timeZoneName: [ \"short\", \"long\" ]\n};\n\n/**\n * When the ToDateTimeOptions abstract operation is called with arguments options,\n * required, and defaults, the following steps are taken:\n */\nfunction ToDateTimeFormats(formats) {\n    if (Object.prototype.toString.call(formats) === '[object Array]') {\n        return formats;\n    }\n    return createDateTimeFormats(formats);\n}\n\n/**\n * When the ToDateTimeOptions abstract operation is called with arguments options,\n * required, and defaults, the following steps are taken:\n */\nexport function ToDateTimeOptions (options, required, defaults) {\n    // 1. If options is undefined, then let options be null, else let options be\n    //    ToObject(options).\n    if (options === undefined)\n        options = null;\n\n    else {\n        // (#12) options needs to be a Record, but it also needs to inherit properties\n        let opt2 = toObject(options);\n        options = new Record();\n\n        for (let k in opt2)\n            options[k] = opt2[k];\n    }\n\n    // 2. Let create be the standard built-in function object defined in ES5, 15.2.3.5.\n    let create = objCreate;\n\n    // 3. Let options be the result of calling the [[Call]] internal method of create with\n    //    undefined as the this value and an argument list containing the single item\n    //    options.\n    options = create(options);\n\n    // 4. Let needDefaults be true.\n    let needDefaults = true;\n\n    // 5. If required is \"date\" or \"any\", then\n    if (required === 'date' || required === 'any') {\n        // a. For each of the property names \"weekday\", \"year\", \"month\", \"day\":\n            // i. If the result of calling the [[Get]] internal method of options with the\n            //    property name is not undefined, then let needDefaults be false.\n        if (options.weekday !== undefined || options.year !== undefined\n                || options.month !== undefined || options.day !== undefined)\n            needDefaults = false;\n    }\n\n    // 6. If required is \"time\" or \"any\", then\n    if (required === 'time' || required === 'any') {\n        // a. For each of the property names \"hour\", \"minute\", \"second\":\n            // i. If the result of calling the [[Get]] internal method of options with the\n            //    property name is not undefined, then let needDefaults be false.\n        if (options.hour !== undefined || options.minute !== undefined || options.second !== undefined)\n                needDefaults = false;\n    }\n\n    // 7. If needDefaults is true and defaults is either \"date\" or \"all\", then\n    if (needDefaults && (defaults === 'date' || defaults === 'all'))\n        // a. For each of the property names \"year\", \"month\", \"day\":\n            // i. Call the [[DefineOwnProperty]] internal method of options with the\n            //    property name, Property Descriptor {[[Value]]: \"numeric\", [[Writable]]:\n            //    true, [[Enumerable]]: true, [[Configurable]]: true}, and false.\n        options.year = options.month = options.day = 'numeric';\n\n    // 8. If needDefaults is true and defaults is either \"time\" or \"all\", then\n    if (needDefaults && (defaults === 'time' || defaults === 'all'))\n        // a. For each of the property names \"hour\", \"minute\", \"second\":\n            // i. Call the [[DefineOwnProperty]] internal method of options with the\n            //    property name, Property Descriptor {[[Value]]: \"numeric\", [[Writable]]:\n            //    true, [[Enumerable]]: true, [[Configurable]]: true}, and false.\n        options.hour = options.minute = options.second = 'numeric';\n\n    // 9. Return options.\n    return options;\n}\n\n/**\n * When the BasicFormatMatcher abstract operation is called with two arguments options and\n * formats, the following steps are taken:\n */\nfunction BasicFormatMatcher (options, formats) {\n    // 1. Let removalPenalty be 120.\n    let removalPenalty = 120;\n\n    // 2. Let additionPenalty be 20.\n    let additionPenalty = 20;\n\n    // 3. Let longLessPenalty be 8.\n    let longLessPenalty = 8;\n\n    // 4. Let longMorePenalty be 6.\n    let longMorePenalty = 6;\n\n    // 5. Let shortLessPenalty be 6.\n    let shortLessPenalty = 6;\n\n    // 6. Let shortMorePenalty be 3.\n    let shortMorePenalty = 3;\n\n    // 7. Let bestScore be -Infinity.\n    let bestScore = -Infinity;\n\n    // 8. Let bestFormat be undefined.\n    let bestFormat;\n\n    // 9. Let i be 0.\n    let i = 0;\n\n    // 10. Assert: formats is an Array object.\n\n    // 11. Let len be the result of calling the [[Get]] internal method of formats with argument \"length\".\n    let len = formats.length;\n\n    // 12. Repeat while i < len:\n    while (i < len) {\n        // a. Let format be the result of calling the [[Get]] internal method of formats with argument ToString(i).\n        let format = formats[i];\n\n        // b. Let score be 0.\n        let score = 0;\n\n        // c. For each property shown in Table 3:\n        for (let property in dateTimeComponents) {\n            if (!hop.call(dateTimeComponents, property))\n                continue;\n\n            // i. Let optionsProp be options.[[<property>]].\n            let optionsProp = options['[['+ property +']]'];\n\n            // ii. Let formatPropDesc be the result of calling the [[GetOwnProperty]] internal method of format\n            //     with argument property.\n            // iii. If formatPropDesc is not undefined, then\n            //     1. Let formatProp be the result of calling the [[Get]] internal method of format with argument property.\n            let formatProp = hop.call(format, property) ? format[property] : undefined;\n\n            // iv. If optionsProp is undefined and formatProp is not undefined, then decrease score by\n            //     additionPenalty.\n            if (optionsProp === undefined && formatProp !== undefined)\n                score -= additionPenalty;\n\n            // v. Else if optionsProp is not undefined and formatProp is undefined, then decrease score by\n            //    removalPenalty.\n            else if (optionsProp !== undefined && formatProp === undefined)\n                score -= removalPenalty;\n\n            // vi. Else\n            else {\n                // 1. Let values be the array [\"2-digit\", \"numeric\", \"narrow\", \"short\",\n                //    \"long\"].\n                let values = [ '2-digit', 'numeric', 'narrow', 'short', 'long' ];\n\n                // 2. Let optionsPropIndex be the index of optionsProp within values.\n                let optionsPropIndex = arrIndexOf.call(values, optionsProp);\n\n                // 3. Let formatPropIndex be the index of formatProp within values.\n                let formatPropIndex = arrIndexOf.call(values, formatProp);\n\n                // 4. Let delta be max(min(formatPropIndex - optionsPropIndex, 2), -2).\n                let delta = Math.max(Math.min(formatPropIndex - optionsPropIndex, 2), -2);\n\n                // 5. If delta = 2, decrease score by longMorePenalty.\n                if (delta === 2)\n                    score -= longMorePenalty;\n\n                // 6. Else if delta = 1, decrease score by shortMorePenalty.\n                else if (delta === 1)\n                    score -= shortMorePenalty;\n\n                // 7. Else if delta = -1, decrease score by shortLessPenalty.\n                else if (delta === -1)\n                    score -= shortLessPenalty;\n\n                // 8. Else if delta = -2, decrease score by longLessPenalty.\n                else if (delta === -2)\n                    score -= longLessPenalty;\n            }\n        }\n\n        // d. If score > bestScore, then\n        if (score > bestScore) {\n            // i. Let bestScore be score.\n            bestScore = score + 1;\n\n            // ii. Let bestFormat be format.\n            bestFormat = format;\n        }\n\n        // e. Increase i by 1.\n        i++;\n    }\n\n    // 13. Return bestFormat.\n    return bestFormat;\n}\n\n/**\n * When the BestFitFormatMatcher abstract operation is called with two arguments options\n * and formats, it performs implementation dependent steps, which should return a set of\n * component representations that a typical user of the selected locale would perceive as\n * at least as good as the one returned by BasicFormatMatcher.\n *\n * This polyfill defines the algorithm to be the same as BasicFormatMatcher,\n * with the addition of bonus points awarded where the requested format is of\n * the same data type as the potentially matching format.\n *\n * This algo relies on the concept of closest distance matching described here:\n * http://unicode.org/reports/tr35/tr35-dates.html#Matching_Skeletons\n * Typically a “best match” is found using a closest distance match, such as:\n *\n * Symbols requesting a best choice for the locale are replaced.\n *      j → one of {H, k, h, K}; C → one of {a, b, B}\n * -> Covered by cldr.js matching process\n *\n * For fields with symbols representing the same type (year, month, day, etc):\n *     Most symbols have a small distance from each other.\n *         M ≅ L; E ≅ c; a ≅ b ≅ B; H ≅ k ≅ h ≅ K; ...\n *     -> Covered by cldr.js matching process\n *\n *     Width differences among fields, other than those marking text vs numeric, are given small distance from each other.\n *         MMM ≅ MMMM\n *         MM ≅ M\n *     Numeric and text fields are given a larger distance from each other.\n *         MMM ≈ MM\n *     Symbols representing substantial differences (week of year vs week of month) are given much larger a distances from each other.\n *         d ≋ D; ...\n *     Missing or extra fields cause a match to fail. (But see Missing Skeleton Fields).\n *\n *\n * For example,\n *\n *     { month: 'numeric', day: 'numeric' }\n *\n * should match\n *\n *     { month: '2-digit', day: '2-digit' }\n *\n * rather than\n *\n *     { month: 'short', day: 'numeric' }\n *\n * This makes sense because a user requesting a formatted date with numeric parts would\n * not expect to see the returned format containing narrow, short or long part names\n */\nfunction BestFitFormatMatcher (options, formats) {\n    /** Diverging: this block implements the hack for single property configuration, eg.:\n     *\n     *      `new Intl.DateTimeFormat('en', {day: 'numeric'})`\n     *\n     * should produce a single digit with the day of the month. This is needed because\n     * CLDR `availableFormats` data structure doesn't cover these cases.\n     */\n    {\n        const optionsPropNames = [];\n        for (let property in dateTimeComponents) {\n            if (!hop.call(dateTimeComponents, property))\n                continue;\n\n            if (options['[['+ property +']]'] !== undefined) {\n                optionsPropNames.push(property);\n            }\n        }\n        if (optionsPropNames.length === 1) {\n            const bestFormat = generateSyntheticFormat(optionsPropNames[0], options['[['+ optionsPropNames[0] +']]']);\n            if (bestFormat) {\n                return bestFormat;\n            }\n        }\n    }\n\n    // 1. Let removalPenalty be 120.\n    let removalPenalty = 120;\n\n    // 2. Let additionPenalty be 20.\n    let additionPenalty = 20;\n\n    // 3. Let longLessPenalty be 8.\n    let longLessPenalty = 8;\n\n    // 4. Let longMorePenalty be 6.\n    let longMorePenalty = 6;\n\n    // 5. Let shortLessPenalty be 6.\n    let shortLessPenalty = 6;\n\n    // 6. Let shortMorePenalty be 3.\n    let shortMorePenalty = 3;\n\n    let patternPenalty = 2;\n\n    let hour12Penalty = 1;\n\n    // 7. Let bestScore be -Infinity.\n    let bestScore = -Infinity;\n\n    // 8. Let bestFormat be undefined.\n    let bestFormat;\n\n    // 9. Let i be 0.\n    let i = 0;\n\n    // 10. Assert: formats is an Array object.\n\n    // 11. Let len be the result of calling the [[Get]] internal method of formats with argument \"length\".\n    let len = formats.length;\n\n    // 12. Repeat while i < len:\n    while (i < len) {\n        // a. Let format be the result of calling the [[Get]] internal method of formats with argument ToString(i).\n        let format = formats[i];\n\n        // b. Let score be 0.\n        let score = 0;\n\n        // c. For each property shown in Table 3:\n        for (let property in dateTimeComponents) {\n            if (!hop.call(dateTimeComponents, property))\n                continue;\n\n            // i. Let optionsProp be options.[[<property>]].\n            let optionsProp = options['[['+ property +']]'];\n\n            // ii. Let formatPropDesc be the result of calling the [[GetOwnProperty]] internal method of format\n            //     with argument property.\n            // iii. If formatPropDesc is not undefined, then\n            //     1. Let formatProp be the result of calling the [[Get]] internal method of format with argument property.\n            let formatProp = hop.call(format, property) ? format[property] : undefined;\n\n            // Diverging: using the default properties produced by the pattern/skeleton\n            // to match it with user options, and apply a penalty\n            let patternProp = hop.call(format._, property) ? format._[property] : undefined;\n            if (optionsProp !== patternProp) {\n                score -= patternPenalty;\n            }\n\n            // iv. If optionsProp is undefined and formatProp is not undefined, then decrease score by\n            //     additionPenalty.\n            if (optionsProp === undefined && formatProp !== undefined)\n                score -= additionPenalty;\n\n            // v. Else if optionsProp is not undefined and formatProp is undefined, then decrease score by\n            //    removalPenalty.\n            else if (optionsProp !== undefined && formatProp === undefined)\n                score -= removalPenalty;\n\n            // vi. Else\n            else {\n                // 1. Let values be the array [\"2-digit\", \"numeric\", \"narrow\", \"short\",\n                //    \"long\"].\n                let values = [ '2-digit', 'numeric', 'narrow', 'short', 'long' ];\n\n                // 2. Let optionsPropIndex be the index of optionsProp within values.\n                let optionsPropIndex = arrIndexOf.call(values, optionsProp);\n\n                // 3. Let formatPropIndex be the index of formatProp within values.\n                let formatPropIndex = arrIndexOf.call(values, formatProp);\n\n                // 4. Let delta be max(min(formatPropIndex - optionsPropIndex, 2), -2).\n                let delta = Math.max(Math.min(formatPropIndex - optionsPropIndex, 2), -2);\n\n                {\n                    // diverging from spec\n                    // When the bestFit argument is true, subtract additional penalty where data types are not the same\n                    if ((formatPropIndex <= 1 && optionsPropIndex >= 2) || (formatPropIndex >= 2 && optionsPropIndex <= 1)) {\n                        // 5. If delta = 2, decrease score by longMorePenalty.\n                        if (delta > 0)\n                            score -= longMorePenalty;\n                        else if (delta < 0)\n                            score -= longLessPenalty;\n                    } else {\n                        // 5. If delta = 2, decrease score by longMorePenalty.\n                        if (delta > 1)\n                            score -= shortMorePenalty;\n                        else if (delta < -1)\n                            score -= shortLessPenalty;\n                    }\n                }\n            }\n        }\n\n        {\n            // diverging to also take into consideration differences between 12 or 24 hours\n            // which is special for the best fit only.\n            if (format._.hour12 !== options.hour12) {\n                score -= hour12Penalty;\n            }\n        }\n\n        // d. If score > bestScore, then\n        if (score > bestScore) {\n            // i. Let bestScore be score.\n            bestScore = score;\n            // ii. Let bestFormat be format.\n            bestFormat = format;\n        }\n\n        // e. Increase i by 1.\n        i++;\n    }\n\n    // 13. Return bestFormat.\n    return bestFormat;\n}\n\n/* 12.2.3 */internals.DateTimeFormat = {\n    '[[availableLocales]]': [],\n    '[[relevantExtensionKeys]]': ['ca', 'nu'],\n    '[[localeData]]': {}\n};\n\n/**\n * When the supportedLocalesOf method of Intl.DateTimeFormat is called, the\n * following steps are taken:\n */\n/* 12.2.2 */\ndefineProperty(Intl.DateTimeFormat, 'supportedLocalesOf', {\n    configurable: true,\n    writable: true,\n    value: fnBind.call(function (locales) {\n        // Bound functions only have the `this` value altered if being used as a constructor,\n        // this lets us imitate a native function that has no constructor\n        if (!hop.call(this, '[[availableLocales]]'))\n            throw new TypeError('supportedLocalesOf() is not a constructor');\n\n        // Create an object whose props can be used to restore the values of RegExp props\n        let regexpRestore = createRegExpRestore(),\n\n        // 1. If options is not provided, then let options be undefined.\n            options = arguments[1],\n\n        // 2. Let availableLocales be the value of the [[availableLocales]] internal\n        //    property of the standard built-in object that is the initial value of\n        //    Intl.NumberFormat.\n\n            availableLocales = this['[[availableLocales]]'],\n\n        // 3. Let requestedLocales be the result of calling the CanonicalizeLocaleList\n        //    abstract operation (defined in 9.2.1) with argument locales.\n            requestedLocales = CanonicalizeLocaleList(locales);\n\n        // Restore the RegExp properties\n        regexpRestore();\n\n        // 4. Return the result of calling the SupportedLocales abstract operation\n        //    (defined in 9.2.8) with arguments availableLocales, requestedLocales,\n        //    and options.\n        return SupportedLocales(availableLocales, requestedLocales, options);\n    }, internals.NumberFormat)\n});\n\n/**\n * This named accessor property returns a function that formats a number\n * according to the effective locale and the formatting options of this\n * DateTimeFormat object.\n */\n/* 12.3.2 */defineProperty(Intl.DateTimeFormat.prototype, 'format', {\n    configurable: true,\n    get: GetFormatDateTime\n});\n\nfunction GetFormatDateTime() {\n    let internal = this !== null && typeof this === 'object' && getInternalProperties(this);\n\n    // Satisfy test 12.3_b\n    if (!internal || !internal['[[initializedDateTimeFormat]]'])\n        throw new TypeError('`this` value for format() is not an initialized Intl.DateTimeFormat object.');\n\n    // The value of the [[Get]] attribute is a function that takes the following\n    // steps:\n\n    // 1. If the [[boundFormat]] internal property of this DateTimeFormat object\n    //    is undefined, then:\n    if (internal['[[boundFormat]]'] === undefined) {\n        // a. Let F be a Function object, with internal properties set as\n        //    specified for built-in functions in ES5, 15, or successor, and the\n        //    length property set to 0, that takes the argument date and\n        //    performs the following steps:\n        let F = function (date = undefined) {\n                //   i. If date is not provided or is undefined, then let x be the\n                //      result as if by the expression Date.now() where Date.now is\n                //      the standard built-in function defined in ES5, 15.9.4.4.\n                //  ii. Else let x be ToNumber(date).\n                // iii. Return the result of calling the FormatDateTime abstract\n                //      operation (defined below) with arguments this and x.\n                let x = date === undefined ? Date.now() : toNumber(date);\n                return FormatDateTime(this, x);\n            };\n        // b. Let bind be the standard built-in function object defined in ES5,\n        //    15.3.4.5.\n        // c. Let bf be the result of calling the [[Call]] internal method of\n        //    bind with F as the this value and an argument list containing\n        //    the single item this.\n        let bf = fnBind.call(F, this);\n        // d. Set the [[boundFormat]] internal property of this NumberFormat\n        //    object to bf.\n        internal['[[boundFormat]]'] = bf;\n    }\n    // Return the value of the [[boundFormat]] internal property of this\n    // NumberFormat object.\n    return internal['[[boundFormat]]'];\n}\n\nfunction formatToParts(date = undefined) {\n    let internal = this !== null && typeof this === 'object' && getInternalProperties(this);\n\n    if (!internal || !internal['[[initializedDateTimeFormat]]'])\n        throw new TypeError('`this` value for formatToParts() is not an initialized Intl.DateTimeFormat object.');\n\n    let x = date === undefined ? Date.now() : toNumber(date);\n    return FormatToPartsDateTime(this, x);\n}\n\nObject.defineProperty(Intl.DateTimeFormat.prototype, 'formatToParts', {\n  enumerable: false,\n  writable: true,\n  configurable: true,\n  value: formatToParts\n});\n\nfunction CreateDateTimeParts(dateTimeFormat, x) {\n    // 1. If x is not a finite Number, then throw a RangeError exception.\n    if (!isFinite(x))\n        throw new RangeError('Invalid valid date passed to format');\n\n    let internal = dateTimeFormat.__getInternalProperties(secret);\n\n    // Creating restore point for properties on the RegExp object... please wait\n    /* let regexpRestore = */createRegExpRestore(); // ###TODO: review this\n\n    // 2. Let locale be the value of the [[locale]] internal property of dateTimeFormat.\n    let locale = internal['[[locale]]'];\n\n    // 3. Let nf be the result of creating a new NumberFormat object as if by the\n    // expression new Intl.NumberFormat([locale], {useGrouping: false}) where\n    // Intl.NumberFormat is the standard built-in constructor defined in 11.1.3.\n    let nf = new Intl.NumberFormat([locale], {useGrouping: false});\n\n    // 4. Let nf2 be the result of creating a new NumberFormat object as if by the\n    // expression new Intl.NumberFormat([locale], {minimumIntegerDigits: 2, useGrouping:\n    // false}) where Intl.NumberFormat is the standard built-in constructor defined in\n    // 11.1.3.\n    let nf2 = new Intl.NumberFormat([locale], {minimumIntegerDigits: 2, useGrouping: false});\n\n    // 5. Let tm be the result of calling the ToLocalTime abstract operation (defined\n    // below) with x, the value of the [[calendar]] internal property of dateTimeFormat,\n    // and the value of the [[timeZone]] internal property of dateTimeFormat.\n    let tm = ToLocalTime(x, internal['[[calendar]]'], internal['[[timeZone]]']);\n\n    // 6. Let result be the value of the [[pattern]] internal property of dateTimeFormat.\n    let pattern = internal['[[pattern]]'];\n\n    // 7.\n    let result = new List();\n\n    // 8.\n    let index = 0;\n\n    // 9.\n    let beginIndex = pattern.indexOf('{');\n\n    // 10.\n    let endIndex = 0;\n\n    // Need the locale minus any extensions\n    let dataLocale = internal['[[dataLocale]]'];\n\n    // Need the calendar data from CLDR\n    let localeData = internals.DateTimeFormat['[[localeData]]'][dataLocale].calendars;\n    let ca = internal['[[calendar]]'];\n\n    // 11.\n        while (beginIndex !== -1) {\n            let fv;\n            // a.\n            endIndex = pattern.indexOf('}', beginIndex);\n            // b.\n            if (endIndex === -1) {\n              throw new Error('Unclosed pattern');\n            }\n            // c.\n            if (beginIndex > index) {\n                arrPush.call(result, {\n                    type: 'literal',\n                    value: pattern.substring(index, beginIndex)\n                });\n            }\n            // d.\n            let p = pattern.substring(beginIndex + 1, endIndex);\n            // e.\n            if (dateTimeComponents.hasOwnProperty(p)) {\n              //   i. Let f be the value of the [[<p>]] internal property of dateTimeFormat.\n              let f = internal['[['+ p +']]'];\n              //  ii. Let v be the value of tm.[[<p>]].\n              let v = tm['[['+ p +']]'];\n              // iii. If p is \"year\" and v ≤ 0, then let v be 1 - v.\n              if (p === 'year' && v <= 0) {\n                v = 1 - v;\n              }\n              //  iv. If p is \"month\", then increase v by 1.\n              else if (p === 'month') {\n                v++;\n              }\n              //   v. If p is \"hour\" and the value of the [[hour12]] internal property of\n              //      dateTimeFormat is true, then\n              else if (p === 'hour' && internal['[[hour12]]'] === true) {\n                  // 1. Let v be v modulo 12.\n                  v = v % 12;\n                  // 2. If v is 0 and the value of the [[hourNo0]] internal property of\n                  //    dateTimeFormat is true, then let v be 12.\n                  if (v === 0 && internal['[[hourNo0]]'] === true) {\n                      v = 12;\n                  }\n              }\n\n              //  vi. If f is \"numeric\", then\n              if (f === 'numeric') {\n                  // 1. Let fv be the result of calling the FormatNumber abstract operation\n                  //    (defined in 11.3.2) with arguments nf and v.\n                  fv = FormatNumber(nf, v);\n              }\n              // vii. Else if f is \"2-digit\", then\n              else if (f === '2-digit') {\n                  // 1. Let fv be the result of calling the FormatNumber abstract operation\n                  //    with arguments nf2 and v.\n                  fv = FormatNumber(nf2, v);\n                  // 2. If the length of fv is greater than 2, let fv be the substring of fv\n                  //    containing the last two characters.\n                  if (fv.length > 2) {\n                      fv = fv.slice(-2);\n                  }\n              }\n              // viii. Else if f is \"narrow\", \"short\", or \"long\", then let fv be a String\n              //     value representing f in the desired form; the String value depends upon\n              //     the implementation and the effective locale and calendar of\n              //     dateTimeFormat. If p is \"month\", then the String value may also depend\n              //     on whether dateTimeFormat has a [[day]] internal property. If p is\n              //     \"timeZoneName\", then the String value may also depend on the value of\n              //     the [[inDST]] field of tm.\n              else if (f in dateWidths) {\n                switch (p) {\n                  case 'month':\n                    fv = resolveDateString(localeData, ca, 'months', f, tm['[['+ p +']]']);\n                    break;\n\n                  case 'weekday':\n                    try {\n                      fv = resolveDateString(localeData, ca, 'days', f, tm['[['+ p +']]']);\n                      // fv = resolveDateString(ca.days, f)[tm['[['+ p +']]']];\n                    } catch (e) {\n                      throw new Error('Could not find weekday data for locale '+locale);\n                    }\n                    break;\n\n                  case 'timeZoneName':\n                    fv = ''; // ###TODO\n                    break;\n\n                  case 'era':\n                    try {\n                      fv = resolveDateString(localeData, ca, 'eras', f, tm['[['+ p +']]']);\n                    } catch (e) {\n                      throw new Error('Could not find era data for locale '+locale);\n                    }\n                    break;\n\n                  default:\n                    fv = tm['[['+ p +']]'];\n                }\n              }\n              // ix\n              arrPush.call(result, {\n                type: p,\n                value: fv\n              });\n            // f.\n            } else if (p === 'ampm') {\n              // i.\n              let v = tm['[[hour]]'];\n              // ii./iii.\n              fv = resolveDateString(localeData, ca, 'dayPeriods', v > 11 ? 'pm' : 'am', null);\n              // iv.\n              arrPush.call(result, {\n                type: 'dayPeriod',\n                value: fv\n              });\n            // g.\n            } else {\n              arrPush.call(result, {\n                type: 'literal',\n                value: pattern.substring(beginIndex, endIndex + 1)\n              });\n            }\n            // h.\n            index = endIndex + 1;\n            // i.\n            beginIndex = pattern.indexOf('{', index);\n        }\n        // 12.\n        if (endIndex < pattern.length - 1) {\n          arrPush.call(result, {\n            type: 'literal',\n            value: pattern.substr(endIndex + 1)\n          });\n        }\n        // 13.\n        return result;\n}\n\n/**\n * When the FormatDateTime abstract operation is called with arguments dateTimeFormat\n * (which must be an object initialized as a DateTimeFormat) and x (which must be a Number\n * value), it returns a String value representing x (interpreted as a time value as\n * specified in ES5, 15.9.1.1) according to the effective locale and the formatting\n * options of dateTimeFormat.\n */\nexport function FormatDateTime(dateTimeFormat, x) {\n  let parts = CreateDateTimeParts(dateTimeFormat, x);\n  let result = '';\n\n  for (let i = 0; parts.length > i; i++) {\n      let part = parts[i];\n      result += part.value;\n  }\n  return result;\n}\n\nfunction FormatToPartsDateTime(dateTimeFormat, x) {\n  let parts = CreateDateTimeParts(dateTimeFormat, x);\n  let result = [];\n  for (let i = 0; parts.length > i; i++) {\n    let part = parts[i];\n    result.push({\n      type: part.type,\n      value: part.value\n    });\n  }\n  return result;\n}\n\n\n/**\n * When the ToLocalTime abstract operation is called with arguments date, calendar, and\n * timeZone, the following steps are taken:\n */\nfunction ToLocalTime(date, calendar, timeZone) {\n    // 1. Apply calendrical calculations on date for the given calendar and time zone to\n    //    produce weekday, era, year, month, day, hour, minute, second, and inDST values.\n    //    The calculations should use best available information about the specified\n    //    calendar and time zone. If the calendar is \"gregory\", then the calculations must\n    //    match the algorithms specified in ES5, 15.9.1, except that calculations are not\n    //    bound by the restrictions on the use of best available information on time zones\n    //    for local time zone adjustment and daylight saving time adjustment imposed by\n    //    ES5, 15.9.1.7 and 15.9.1.8.\n    // ###TODO###\n    let d = new Date(date),\n        m = 'get' + (timeZone || '');\n\n    // 2. Return a Record with fields [[weekday]], [[era]], [[year]], [[month]], [[day]],\n    //    [[hour]], [[minute]], [[second]], and [[inDST]], each with the corresponding\n    //    calculated value.\n    return new Record({\n        '[[weekday]]': d[m + 'Day'](),\n        '[[era]]'    : +(d[m + 'FullYear']() >= 0),\n        '[[year]]'   : d[m + 'FullYear'](),\n        '[[month]]'  : d[m + 'Month'](),\n        '[[day]]'    : d[m + 'Date'](),\n        '[[hour]]'   : d[m + 'Hours'](),\n        '[[minute]]' : d[m + 'Minutes'](),\n        '[[second]]' : d[m + 'Seconds'](),\n        '[[inDST]]'  : false // ###TODO###\n    });\n}\n\n/**\n * The function returns a new object whose properties and attributes are set as if\n * constructed by an object literal assigning to each of the following properties the\n * value of the corresponding internal property of this DateTimeFormat object (see 12.4):\n * locale, calendar, numberingSystem, timeZone, hour12, weekday, era, year, month, day,\n * hour, minute, second, and timeZoneName. Properties whose corresponding internal\n * properties are not present are not assigned.\n */\n/* 12.3.3 */defineProperty(Intl.DateTimeFormat.prototype, 'resolvedOptions', {\n    writable: true,\n    configurable: true,\n    value: function () {\n        let prop,\n            descs = new Record(),\n            props = [\n                'locale', 'calendar', 'numberingSystem', 'timeZone', 'hour12', 'weekday',\n                'era', 'year', 'month', 'day', 'hour', 'minute', 'second', 'timeZoneName'\n            ],\n            internal = this !== null && typeof this === 'object' && getInternalProperties(this);\n\n        // Satisfy test 12.3_b\n        if (!internal || !internal['[[initializedDateTimeFormat]]'])\n            throw new TypeError('`this` value for resolvedOptions() is not an initialized Intl.DateTimeFormat object.');\n\n        for (let i = 0, max = props.length; i < max; i++) {\n            if (hop.call(internal, prop = '[[' + props[i] + ']]'))\n                descs[props[i]] = { value: internal[prop], writable: true, configurable: true, enumerable: true };\n        }\n\n        return objCreate({}, descs);\n    }\n});\n","// Sect 13 Locale Sensitive Functions of the ECMAScript Language Specification\n// ===========================================================================\n\nimport {\n    Intl\n} from \"./8.intl.js\";\n\nimport {\n    FormatNumber,\n    NumberFormatConstructor\n} from \"./11.numberformat.js\";\n\nimport {\n    ToDateTimeOptions,\n    DateTimeFormatConstructor,\n    FormatDateTime\n} from \"./12.datetimeformat.js\";\n\nlet ls = Intl.__localeSensitiveProtos = {\n    Number: {},\n    Date:   {}\n};\n\n/**\n * When the toLocaleString method is called with optional arguments locales and options,\n * the following steps are taken:\n */\n/* 13.2.1 */ls.Number.toLocaleString = function () {\n    // Satisfy test 13.2.1_1\n    if (Object.prototype.toString.call(this) !== '[object Number]')\n        throw new TypeError('`this` value must be a number for Number.prototype.toLocaleString()');\n\n    // 1. Let x be this Number value (as defined in ES5, 15.7.4).\n    // 2. If locales is not provided, then let locales be undefined.\n    // 3. If options is not provided, then let options be undefined.\n    // 4. Let numberFormat be the result of creating a new object as if by the\n    //    expression new Intl.NumberFormat(locales, options) where\n    //    Intl.NumberFormat is the standard built-in constructor defined in 11.1.3.\n    // 5. Return the result of calling the FormatNumber abstract operation\n    //    (defined in 11.3.2) with arguments numberFormat and x.\n    return FormatNumber(new NumberFormatConstructor(arguments[0], arguments[1]), this);\n};\n\n/**\n * When the toLocaleString method is called with optional arguments locales and options,\n * the following steps are taken:\n */\n/* 13.3.1 */ls.Date.toLocaleString = function () {\n    // Satisfy test 13.3.0_1\n    if (Object.prototype.toString.call(this) !== '[object Date]')\n        throw new TypeError('`this` value must be a Date instance for Date.prototype.toLocaleString()');\n\n    // 1. Let x be this time value (as defined in ES5, 15.9.5).\n    let x = +this;\n\n    // 2. If x is NaN, then return \"Invalid Date\".\n    if (isNaN(x))\n        return 'Invalid Date';\n\n    // 3. If locales is not provided, then let locales be undefined.\n    let locales = arguments[0];\n\n    // 4. If options is not provided, then let options be undefined.\n    let options = arguments[1];\n\n    // 5. Let options be the result of calling the ToDateTimeOptions abstract\n    //    operation (defined in 12.1.1) with arguments options, \"any\", and \"all\".\n    options = ToDateTimeOptions(options, 'any', 'all');\n\n    // 6. Let dateTimeFormat be the result of creating a new object as if by the\n    //    expression new Intl.DateTimeFormat(locales, options) where\n    //    Intl.DateTimeFormat is the standard built-in constructor defined in 12.1.3.\n    let dateTimeFormat = new DateTimeFormatConstructor(locales, options);\n\n    // 7. Return the result of calling the FormatDateTime abstract operation (defined\n    //    in 12.3.2) with arguments dateTimeFormat and x.\n    return FormatDateTime(dateTimeFormat, x);\n};\n\n/**\n * When the toLocaleDateString method is called with optional arguments locales and\n * options, the following steps are taken:\n */\n/* 13.3.2 */ls.Date.toLocaleDateString = function () {\n    // Satisfy test 13.3.0_1\n    if (Object.prototype.toString.call(this) !== '[object Date]')\n        throw new TypeError('`this` value must be a Date instance for Date.prototype.toLocaleDateString()');\n\n    // 1. Let x be this time value (as defined in ES5, 15.9.5).\n    let x = +this;\n\n    // 2. If x is NaN, then return \"Invalid Date\".\n    if (isNaN(x))\n        return 'Invalid Date';\n\n    // 3. If locales is not provided, then let locales be undefined.\n    let locales = arguments[0],\n\n    // 4. If options is not provided, then let options be undefined.\n    options = arguments[1];\n\n    // 5. Let options be the result of calling the ToDateTimeOptions abstract\n    //    operation (defined in 12.1.1) with arguments options, \"date\", and \"date\".\n    options = ToDateTimeOptions(options, 'date', 'date');\n\n    // 6. Let dateTimeFormat be the result of creating a new object as if by the\n    //    expression new Intl.DateTimeFormat(locales, options) where\n    //    Intl.DateTimeFormat is the standard built-in constructor defined in 12.1.3.\n    let dateTimeFormat = new DateTimeFormatConstructor(locales, options);\n\n    // 7. Return the result of calling the FormatDateTime abstract operation (defined\n    //    in 12.3.2) with arguments dateTimeFormat and x.\n    return FormatDateTime(dateTimeFormat, x);\n};\n\n/**\n * When the toLocaleTimeString method is called with optional arguments locales and\n * options, the following steps are taken:\n */\n/* 13.3.3 */ls.Date.toLocaleTimeString = function () {\n    // Satisfy test 13.3.0_1\n    if (Object.prototype.toString.call(this) !== '[object Date]')\n        throw new TypeError('`this` value must be a Date instance for Date.prototype.toLocaleTimeString()');\n\n    // 1. Let x be this time value (as defined in ES5, 15.9.5).\n    let x = +this;\n\n    // 2. If x is NaN, then return \"Invalid Date\".\n    if (isNaN(x))\n        return 'Invalid Date';\n\n    // 3. If locales is not provided, then let locales be undefined.\n    let locales = arguments[0];\n\n    // 4. If options is not provided, then let options be undefined.\n    let options = arguments[1];\n\n    // 5. Let options be the result of calling the ToDateTimeOptions abstract\n    //    operation (defined in 12.1.1) with arguments options, \"time\", and \"time\".\n    options = ToDateTimeOptions(options, 'time', 'time');\n\n    // 6. Let dateTimeFormat be the result of creating a new object as if by the\n    //    expression new Intl.DateTimeFormat(locales, options) where\n    //    Intl.DateTimeFormat is the standard built-in constructor defined in 12.1.3.\n    let dateTimeFormat = new DateTimeFormatConstructor(locales, options);\n\n    // 7. Return the result of calling the FormatDateTime abstract operation (defined\n    //    in 12.3.2) with arguments dateTimeFormat and x.\n    return FormatDateTime(dateTimeFormat, x);\n};\n\nexport default ls;\n","/**\n * @license Copyright 2013 Andy Earnshaw, MIT License\n *\n * Implements the ECMAScript Internationalization API in ES5-compatible environments,\n * following the ECMA-402 specification as closely as possible\n *\n * ECMA-402: http://ecma-international.org/ecma-402/1.0/\n *\n * CLDR format locale data should be provided using IntlPolyfill.__addLocaleData().\n */\n\nimport {\n    defineProperty,\n    hop,\n    arrPush,\n    arrShift,\n    internals\n} from \"./util.js\";\n\nimport {\n    IsStructurallyValidLanguageTag,\n    defaultLocale,\n    setDefaultLocale\n} from \"./6.locales-currencies-tz.js\";\n\nimport {\n    Intl\n} from \"./8.intl.js\";\n\nimport \"./11.numberformat.js\";\n\nimport \"./12.datetimeformat.js\";\n\nimport ls from \"./13.locale-sensitive-functions.js\";\n\ndefineProperty(Intl, '__applyLocaleSensitivePrototypes', {\n    writable: true,\n    configurable: true,\n    value: function () {\n        defineProperty(Number.prototype, 'toLocaleString', { writable: true, configurable: true, value: ls.Number.toLocaleString });\n        // Need this here for IE 8, to avoid the _DontEnum_ bug\n        defineProperty(Date.prototype, 'toLocaleString', { writable: true, configurable: true, value: ls.Date.toLocaleString });\n\n        for (let k in ls.Date) {\n            if (hop.call(ls.Date, k))\n                defineProperty(Date.prototype, k, { writable: true, configurable: true, value: ls.Date[k] });\n        }\n    }\n});\n\n/**\n * Can't really ship a single script with data for hundreds of locales, so we provide\n * this __addLocaleData method as a means for the developer to add the data on an\n * as-needed basis\n */\ndefineProperty(Intl, '__addLocaleData', {\n    value: function (data) {\n        if (!IsStructurallyValidLanguageTag(data.locale))\n            throw new Error(`Invalid language tag \"${data.locale}\" when calling __addLocaleData(\"${data.locale}\", ...) to register new locale data.`);\n\n        addLocaleData(data, data.locale);\n    }\n});\n\nfunction addLocaleData (data, tag) {\n    // Both NumberFormat and DateTimeFormat require number data, so throw if it isn't present\n    if (!data.number)\n        throw new Error(\"Object passed doesn't contain locale data for Intl.NumberFormat\");\n\n    let locale,\n        locales = [ tag ],\n        parts   = tag.split('-');\n\n    // Create fallbacks for locale data with scripts, e.g. Latn, Hans, Vaii, etc\n    if (parts.length > 2 && parts[1].length === 4)\n        arrPush.call(locales, parts[0] + '-' + parts[2]);\n\n    while ((locale = arrShift.call(locales))) {\n        // Add to NumberFormat internal properties as per 11.2.3\n        arrPush.call(internals.NumberFormat['[[availableLocales]]'], locale);\n        internals.NumberFormat['[[localeData]]'][locale] = data.number;\n\n        // ...and DateTimeFormat internal properties as per 12.2.3\n        if (data.date) {\n            data.date.nu = data.number.nu;\n            arrPush.call(internals.DateTimeFormat['[[availableLocales]]'], locale);\n            internals.DateTimeFormat['[[localeData]]'][locale] = data.date;\n        }\n    }\n\n    // If this is the first set of locale data added, make it the default\n    if (defaultLocale === undefined)\n        setDefaultLocale(tag);\n}\n\ndefineProperty(Intl, '__disableRegExpRestore', {\n    value: function () {\n        internals.disableRegExpRestore = true;\n    }\n});\n\nexport default Intl;\n","import IntlPolyfill from \"./core.js\";\n\n// hack to export the polyfill as global Intl if needed\nif (typeof Intl === 'undefined') {\n    try {\n        window.Intl = IntlPolyfill;\n        IntlPolyfill.__applyLocaleSensitivePrototypes();\n    } catch (e) {\n        // can be read only property\n    }\n}\n\nexport default IntlPolyfill;\n"],"names":["realDefineProp","sentinel","defineProperty","writable","a","prototype","Object","e","es3","__defineGetter__","hop","hasOwnProperty","obj","name","desc","get","call","value","arrIndexOf","Array","indexOf","search","t","length","i","arguments","max","objCreate","create","proto","props","F","k","arrSlice","slice","arrConcat","concat","arrPush","push","arrJoin","join","arrShift","shift","fnBind","Function","bind","thisObj","fn","args","apply","internals","secret","Math","random","log10Floor","n","log10","floor","x","round","log","LOG10E","Number","Record","enumerable","configurable","List","createRegExpRestore","disableRegExpRestore","regExpCache","RegExp","lastMatch","leftContext","multiline","input","has","esc","lm","replace","reg","m","exprStr","match","expr","lastIndex","exec","toObject","arg","TypeError","toNumber","toInteger","number","isNaN","Infinity","abs","toLength","len","pow","min","getInternalProperties","__getInternalProperties","extlang","language","script","region","variant","singleton","extension","privateuse","irregular","regular","grandfathered","langtag","expBCP47Syntax","expVariantDupes","expSingletonDupes","expExtSequences","defaultLocale","setDefaultLocale","locale","redundantTags","toLatinUpperCase","str","ch","charAt","toUpperCase","IsStructurallyValidLanguageTag","test","CanonicalizeLanguageTag","parts","toLowerCase","split","sort","source","tags","subtags","extLang","DefaultLocale","expCurrencyCode","IsWellFormedCurrencyCode","currency","c","String","normalized","expUnicodeExSeq","CanonicalizeLocaleList","locales","undefined","seen","O","Pk","kPresent","kValue","tag","RangeError","BestAvailableLocale","availableLocales","candidate","pos","lastIndexOf","substring","LookupMatcher","requestedLocales","availableLocale","noExtensionsLocale","result","extensionIndex","BestFitMatcher","UnicodeExtensionSubtags","size","extensionSubtags","attribute","q","p","codePointAt","type","key","attr","tail","ResolveLocale","options","relevantExtensionKeys","localeData","ReferenceError","matcher","r","foundLocale","extensionSubtagsLength","supportedExtension","foundLocaleData","keyLocaleData","supportedExtensionAddition","keyPos","requestedValue","valuePos","optionsValue","privateIndex","preExtension","postExtension","LookupSupportedLocales","subset","subsetArray","BestFitSupportedLocales","SupportedLocales","localeMatcher","P","GetOption","property","values","fallback","Boolean","GetNumberOption","minimum","maximum","Intl","getCanonicalLocales","ll","currencyMinorUnits","BYR","XOF","BIF","XAF","CLF","CLP","KMF","DJF","GNF","ISK","IQD","JPY","JOD","KRW","KWD","LYD","PYG","RWF","TND","UGX","UYI","VUV","VND","NumberFormatConstructor","NumberFormat","InitializeNumberFormat","numberFormat","internal","regexpRestore","opt","dataLocale","s","cDigits","CurrencyDigits","cd","mnid","mnfdDefault","mnfd","mxfdDefault","mxfd","mnsd","minimumSignificantDigits","mxsd","maximumSignificantDigits","g","dataLocaleData","patterns","stylePatterns","positivePattern","negativePattern","format","GetFormatNumber","babelHelpers","FormatNumber","bf","formatToParts","FormatNumberToParts","PartitionNumberPattern","part","FormatNumberToString","ToRawPrecision","ToRawFixed","nums","data","ild","symbols","latn","pattern","beginIndex","endIndex","nextIndex","Error","literal","nan","isFinite","infinity","numSys","digits","digit","integer","fraction","decimalSepIndex","groupSepSymbol","group","groups","pgSize","primaryGroupSize","sgSize","secondaryGroupSize","end","idx","start","integerGroup","decimalSepSymbol","decimal","plusSignSymbol","plusSign","minusSignSymbol","minusSign","percentSignSymbol","percentSign","currencies","minPrecision","maxPrecision","f","exp","LN10","cut","minInteger","minFraction","maxFraction","toFixed","int","z","b","prop","descs","expDTComponents","expPatternTrimmer","unwantedDTCs","dtKeys","tmKeys","isDateFormatOnly","isTimeFormatOnly","joinDateAndTimeFormats","dateFormatObj","timeFormatObj","o","_","j","computeFinalPatterns","formatObj","pattern12","extendedPattern","$0","expDTComponentsMeta","era","year","quarter","month","week","day","weekday","hour12","hour","minute","second","timeZoneName","createDateTimeFormat","skeleton","createDateTimeFormats","formats","availableFormats","timeFormats","dateFormats","computed","timeRelatedFormats","dateRelatedFormats","full","long","medium","short","originalPattern","validSyntheticProps","generateSyntheticFormat","propName","propValue","dateWidths","narrow","resolveDateString","ca","component","width","gregory","alts","resolved","DateTimeFormatConstructor","DateTimeFormat","InitializeDateTimeFormat","dateTimeFormat","ToDateTimeOptions","tz","timeZone","dateTimeComponents","bestFormat","ToDateTimeFormats","BasicFormatMatcher","hr12","BestFitFormatMatcher","hourNo0","GetFormatDateTime","toString","required","defaults","opt2","needDefaults","removalPenalty","additionPenalty","longLessPenalty","longMorePenalty","shortLessPenalty","shortMorePenalty","bestScore","score","optionsProp","formatProp","optionsPropIndex","formatPropIndex","delta","optionsPropNames","patternPenalty","hour12Penalty","patternProp","date","Date","now","FormatDateTime","FormatToPartsDateTime","CreateDateTimeParts","nf","useGrouping","nf2","minimumIntegerDigits","tm","ToLocalTime","index","calendars","fv","v","substr","calendar","d","ls","__localeSensitiveProtos","toLocaleString","toLocaleDateString","toLocaleTimeString","addLocaleData","nu","IntlPolyfill","__applyLocaleSensitivePrototypes"],"mappings":"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"}